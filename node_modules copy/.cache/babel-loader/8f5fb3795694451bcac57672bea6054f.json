{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\components\\\\Tools\\\\GetallIP.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { MDBDataTableV5 } from \"mdbreact\"; // import \"@fortawesome/fontawesome-free/css/all.min.css\";\n// import \"bootstrap-css-only/css/bootstrap.min.css\";\n// import \"mdbreact/dist/css/mdb.css\";\n\nexport default function GetallIP(ac) {\n  const [mapRows, setmapRows] = useState([]);\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\n    organizationId: `${ac.dc.organizationID}`,\n    networkId: `${ac.dc.networkID}`\n  };\n  useEffect(() => {\n    fetch(\"/clients\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/devices\").then(res => res.json()).then(client => {\n      ac.dc.setclientList(client.devices);\n    });\n  }, [ac.dc.networkID]);\n  let row = [];\n\n  const test = () => {\n    for (var x = 0; x < 3; x++) {\n      row[x] = ac.dc.clientList[x];\n      console.log(\"test -> row[x]\", row[x]); // setmapRows([\n      //   {\n      //     Description: item.name,\n      //     Model: item.model,\n      //     LAN_IP_address: item.lanIp,\n      //     MAC_address: item.mac,\n      //     WAN_1_IP: item.wan1Ip,\n      //     WAN_2_IP: item.wan2Ip,\n      //     Serial: item.serial,\n      //   },\n      // ]);\n    }\n  };\n\n  console.log(\"test -> row[x]\", row); // const test = () => {\n  //   ac.dc.clientList.map((item) => {\n  //     setmapRows([\n  //       {\n  //         Description: item.name,\n  //         Model: item.model,\n  //         LAN_IP_address: item.lanIp,\n  //         MAC_address: item.mac,\n  //         WAN_1_IP: item.wan1Ip,\n  //         WAN_2_IP: item.wan2Ip,\n  //         Serial: item.serial,\n  //       },\n  //     ]);\n  //   });\n  // };\n  // , setDatatable] = useState({\n\n  const datatable = {\n    columns: [{\n      label: \"Description\",\n      field: \"Description\",\n      width: 150,\n      attributes: {\n        \"aria-controls\": \"DataTable\",\n        \"aria-label\": \"Description\"\n      }\n    }, {\n      label: \"Model\",\n      field: \"Model\",\n      sort: \"asc\",\n      width: 270\n    }, {\n      label: \"LAN IP address\",\n      field: \"LAN_IP_address\",\n      sort: \"asc\",\n      width: 200\n    }, {\n      label: \"MAC address\",\n      field: \"MAC_address\",\n      sort: \"asc\",\n      width: 100\n    }, {\n      label: \"WAN 1 IP\",\n      field: \"WAN_1_IP\",\n      sort: \"asc\",\n      width: 150\n    }, {\n      label: \"WAN 2 IP\",\n      field: \"WAN 2 IP\",\n      sort: \"asc\",\n      width: 100\n    }, {\n      label: \"Serial\",\n      field: \"Serial\",\n      sort: \"asc\",\n      width: 100\n    }],\n    rows: mapRows\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: test,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, \"BUTTON\"), /*#__PURE__*/React.createElement(MDBDataTableV5, {\n    hover: true,\n    entriesOptions: [5, 20, 25],\n    entries: 5,\n    pagesAmount: 4,\n    data: datatable,\n    pagingTop: true,\n    searchTop: true,\n    searchBottom: false,\n    exportToCSV: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/components/Tools/GetallIP.js"],"names":["React","useEffect","useState","MDBDataTableV5","GetallIP","ac","mapRows","setmapRows","APIbody","dc","apiKey","organizationId","organizationID","networkId","networkID","fetch","method","cache","headers","content_type","body","JSON","stringify","then","response","json","res","client","setclientList","devices","row","test","x","clientList","console","log","datatable","columns","label","field","width","attributes","sort","rows"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { MDBDataTableV5 } from \"mdbreact\";\r\n// import \"@fortawesome/fontawesome-free/css/all.min.css\";\r\n// import \"bootstrap-css-only/css/bootstrap.min.css\";\r\n// import \"mdbreact/dist/css/mdb.css\";\r\n\r\nexport default function GetallIP(ac) {\r\n  const [mapRows, setmapRows] = useState([]);\r\n  const APIbody = {\r\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\r\n    organizationId: `${ac.dc.organizationID}`,\r\n    networkId: `${ac.dc.networkID}`,\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"/clients\", {\r\n      method: [\"POST\"],\r\n      cache: \"no-cache\",\r\n      headers: {\r\n        content_type: \"application/json\",\r\n      },\r\n      body: JSON.stringify(APIbody),\r\n    }).then((response) => {\r\n      return response.json;\r\n    });\r\n    fetch(\"/devices\")\r\n      .then((res) => res.json())\r\n      .then((client) => {\r\n        ac.dc.setclientList(client.devices);\r\n      });\r\n  }, [ac.dc.networkID]);\r\n\r\n  let row = [];\r\n  const test = () => {\r\n    for (var x = 0; x < 3; x++) {\r\n      row[x] = ac.dc.clientList[x];\r\n      console.log(\"test -> row[x]\", row[x]);\r\n\r\n      // setmapRows([\r\n      //   {\r\n      //     Description: item.name,\r\n      //     Model: item.model,\r\n      //     LAN_IP_address: item.lanIp,\r\n      //     MAC_address: item.mac,\r\n      //     WAN_1_IP: item.wan1Ip,\r\n      //     WAN_2_IP: item.wan2Ip,\r\n      //     Serial: item.serial,\r\n      //   },\r\n      // ]);\r\n    }\r\n  };\r\n\r\n  console.log(\"test -> row[x]\", row);\r\n  // const test = () => {\r\n  //   ac.dc.clientList.map((item) => {\r\n  //     setmapRows([\r\n  //       {\r\n  //         Description: item.name,\r\n  //         Model: item.model,\r\n  //         LAN_IP_address: item.lanIp,\r\n  //         MAC_address: item.mac,\r\n  //         WAN_1_IP: item.wan1Ip,\r\n  //         WAN_2_IP: item.wan2Ip,\r\n  //         Serial: item.serial,\r\n  //       },\r\n  //     ]);\r\n  //   });\r\n  // };\r\n\r\n  // , setDatatable] = useState({\r\n\r\n  const datatable = {\r\n    columns: [\r\n      {\r\n        label: \"Description\",\r\n        field: \"Description\",\r\n        width: 150,\r\n        attributes: {\r\n          \"aria-controls\": \"DataTable\",\r\n          \"aria-label\": \"Description\",\r\n        },\r\n      },\r\n      {\r\n        label: \"Model\",\r\n        field: \"Model\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"LAN IP address\",\r\n        field: \"LAN_IP_address\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"MAC address\",\r\n        field: \"MAC_address\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"WAN 1 IP\",\r\n        field: \"WAN_1_IP\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"WAN 2 IP\",\r\n        field: \"WAN 2 IP\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Serial\",\r\n        field: \"Serial\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n    rows: mapRows,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={test}>BUTTON</button>\r\n      <MDBDataTableV5\r\n        hover\r\n        entriesOptions={[5, 20, 25]}\r\n        entries={5}\r\n        pagesAmount={4}\r\n        data={datatable}\r\n        pagingTop\r\n        searchTop\r\n        searchBottom={false}\r\n        exportToCSV={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}