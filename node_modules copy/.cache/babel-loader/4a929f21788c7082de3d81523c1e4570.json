{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\components\\\\LiveLog.js\";\nimport React from \"react\";\n/*\r\n\tRead a text file and out put the content.\r\n\t\r\n\tExample Usage:\r\n\r\n\tvar myTxt = require(\"./myTxt.txt\");\r\n\t...\r\n\t<TextFileReader\r\n\t\ttxt={myTxt}\r\n\t/>\r\n */\n\nclass LiveLog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.readTextFile = file => {\n      var rawFile = new XMLHttpRequest();\n      rawFile.open(\"GET\", file, false);\n\n      rawFile.onreadystatechange = () => {\n        if (rawFile.readyState === 4) {\n          if (rawFile.status === 200 || rawFile.status == 0) {\n            var allText = rawFile.responseText;\n            this.setState({\n              text: allText\n            });\n          }\n        }\n      };\n\n      rawFile.send(null);\n    };\n\n    this.state = {\n      text: \"./test.text\"\n    };\n  }\n\n  componentDidMount() {\n    this.readTextFile(this.props.txt);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, this.state.text.split(\"\\n\").map((item, key) => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }\n      }));\n    }));\n  }\n\n}\n\nexport default LiveLog;","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/components/LiveLog.js"],"names":["React","LiveLog","Component","constructor","props","readTextFile","file","rawFile","XMLHttpRequest","open","onreadystatechange","readyState","status","allText","responseText","setState","text","send","state","componentDidMount","txt","render","split","map","item","key"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;;;;;;;AAWA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAYnBC,YAZmB,GAYHC,IAAD,IAAU;AACvB,UAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACAD,MAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBH,IAApB,EAA0B,KAA1B;;AACAC,MAAAA,OAAO,CAACG,kBAAR,GAA6B,MAAM;AACjC,YAAIH,OAAO,CAACI,UAAR,KAAuB,CAA3B,EAA8B;AAC5B,cAAIJ,OAAO,CAACK,MAAR,KAAmB,GAAnB,IAA0BL,OAAO,CAACK,MAAR,IAAkB,CAAhD,EAAmD;AACjD,gBAAIC,OAAO,GAAGN,OAAO,CAACO,YAAtB;AACA,iBAAKC,QAAL,CAAc;AACZC,cAAAA,IAAI,EAAEH;AADM,aAAd;AAGD;AACF;AACF,OATD;;AAUAN,MAAAA,OAAO,CAACU,IAAR,CAAa,IAAb;AACD,KA1BkB;;AAGjB,SAAKC,KAAL,GAAa;AACXF,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEDG,EAAAA,iBAAiB,GAAG;AAClB,SAAKd,YAAL,CAAkB,KAAKD,KAAL,CAAWgB,GAA7B;AACD;;AAkBDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKH,KAAL,CAAWF,IAAX,CAAgBM,KAAhB,CAAsB,IAAtB,EAA4BC,GAA5B,CAAgC,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC9C,0BACE;AAAM,QAAA,GAAG,EAAEA,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD,KAPA,CADH,CADF;AAYD;;AA1CmC;;AA6CtC,eAAexB,OAAf","sourcesContent":["import React from \"react\";\r\n\r\n/*\r\n\tRead a text file and out put the content.\r\n\t\r\n\tExample Usage:\r\n\r\n\tvar myTxt = require(\"./myTxt.txt\");\r\n\t...\r\n\t<TextFileReader\r\n\t\ttxt={myTxt}\r\n\t/>\r\n */\r\nclass LiveLog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      text: \"./test.text\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.readTextFile(this.props.txt);\r\n  }\r\n\r\n  readTextFile = (file) => {\r\n    var rawFile = new XMLHttpRequest();\r\n    rawFile.open(\"GET\", file, false);\r\n    rawFile.onreadystatechange = () => {\r\n      if (rawFile.readyState === 4) {\r\n        if (rawFile.status === 200 || rawFile.status == 0) {\r\n          var allText = rawFile.responseText;\r\n          this.setState({\r\n            text: allText,\r\n          });\r\n        }\r\n      }\r\n    };\r\n    rawFile.send(null);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.text.split(\"\\n\").map((item, key) => {\r\n          return (\r\n            <span key={key}>\r\n              {/* {item} */}\r\n              <br />\r\n            </span>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LiveLog;\r\n"]},"metadata":{},"sourceType":"module"}