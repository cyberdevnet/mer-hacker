{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\components\\\\Tools\\\\GetAllSubnets.js\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { MDBDataTableV5 } from \"mdbreact\";\nexport default function GetAllSubnets(ac) {\n  const [showtable, setshowtable] = useState(false);\n  const [trigger, settrigger] = useState(0);\n  const [loading, setloading] = useState(false);\n  const [mapRows, setmapRows] = useState([]); // eslint-disable-next-line\n\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\n    organizationId: `${ac.dc.organizationID}`,\n    networkId: `${ac.dc.networkID}`\n  };\n  const isFirstRun = useRef(true);\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n\n    async function APIcall() {\n      if (ac.dc.isOrgSelected && ac.dc.isNetSelected === true) {\n        setloading(true);\n        fetch(\"/vlans\", {\n          method: [\"POST\"],\n          cache: \"no-cache\",\n          headers: {\n            content_type: \"application/json\"\n          },\n          body: JSON.stringify(APIbody)\n        }).then(response => {\n          return response.json;\n        });\n        fetch(\"/vlans\").then(res => res.json()).then(vlans => {\n          ac.dc.setvlanList(vlans.vlans);\n          let row = []; // eslint-disable-next-line\n\n          vlans.vlans.map(item => {\n            var rowModel = [{\n              Subnet: item.subnet,\n              VlanID: item.id,\n              VlanName: item.name,\n              MX_IP: item.applianceIp,\n              DNS: item.dnsNameservers\n            }];\n            row.push(...rowModel);\n            setmapRows(row);\n          });\n        }).then(() => setloading(false)).then(() => setshowtable(true)).catch(err => {\n          ac.dc.setalert(true);\n          console.log(\"this is the err: \", err);\n          ac.dc.setloadingButton(false);\n        });\n      } else {\n        ac.dc.setswitchAlertModal(true);\n        ac.dc.setswitchToolsTemplate(false);\n      }\n    }\n\n    APIcall();\n    return () => {\n      ac.dc.setvlanList([]);\n      setmapRows([]);\n      setshowtable(false);\n      ac.dc.setalert(false);\n    }; // eslint-disable-next-line\n  }, [trigger]);\n\n  const handleSubnets = e => {\n    e.preventDefault();\n    settrigger(trigger + 1);\n  };\n\n  const datatable = {\n    columns: [{\n      label: \"Subnet\",\n      field: \"Subnet\",\n      width: 150,\n      attributes: {\n        \"aria-controls\": \"DataTable\",\n        \"aria-label\": \"Description\"\n      }\n    }, {\n      label: \"VLAN ID\",\n      field: \"VlanID\",\n      sort: \"asc\",\n      width: 270\n    }, {\n      label: \"VLAN Name\",\n      field: \"VlanName\",\n      sort: \"asc\",\n      width: 200\n    }, {\n      label: \"MX IP\",\n      field: \"MX_IP\",\n      sort: \"asc\",\n      width: 100\n    }, {\n      label: \"DNS Servers\",\n      field: \"DNS\",\n      sort: \"asc\",\n      width: 100\n    }],\n    rows: mapRows\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-inner-main-templates\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-group\",\n    id: \"accordion\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"panel-title-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    \"data-toggle\": \"collapse\",\n    \"data-parent\": \"#accordion\",\n    href: \"#collapseOne\",\n    className: \"collapsed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"glyphicon glyphicon-info-sign\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseOne\",\n    className: \"panel-collapse collapse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  }, \"This scripts iterates through all networks in an organization and print all the subnets and VLANs associated with every organization. The script works only on MX and Z3 devices, does not work on VPN HUBs, the network must be reachable in the Meraki Dashboard.\")))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: !loading ? handleSubnets : null,\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-refresh fa-spin\",\n    style: {\n      marginRight: \"5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 19\n    }\n  }), loading && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 29\n    }\n  }, \"Loading Data\"), !loading && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 30\n    }\n  }, \"RUN\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, showtable ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MDBDataTableV5, {\n    hover: true,\n    entriesOptions: [10, 25, 50, 100],\n    entries: 10,\n    pagesAmount: 10,\n    data: datatable,\n    pagingTop: true,\n    searchTop: true,\n    searchBottom: false,\n    exportToCSV: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  })))));\n}","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/components/Tools/GetAllSubnets.js"],"names":["React","useEffect","useState","useRef","MDBDataTableV5","GetAllSubnets","ac","showtable","setshowtable","trigger","settrigger","loading","setloading","mapRows","setmapRows","APIbody","dc","apiKey","organizationId","organizationID","networkId","networkID","isFirstRun","current","APIcall","isOrgSelected","isNetSelected","fetch","method","cache","headers","content_type","body","JSON","stringify","then","response","json","res","vlans","setvlanList","row","map","item","rowModel","Subnet","subnet","VlanID","id","VlanName","name","MX_IP","applianceIp","DNS","dnsNameservers","push","catch","err","setalert","console","log","setloadingButton","setswitchAlertModal","setswitchToolsTemplate","handleSubnets","e","preventDefault","datatable","columns","label","field","width","attributes","sort","rows","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { MDBDataTableV5 } from \"mdbreact\";\r\n\r\nexport default function GetAllSubnets(ac) {\r\n  const [showtable, setshowtable] = useState(false);\r\n  const [trigger, settrigger] = useState(0);\r\n  const [loading, setloading] = useState(false);\r\n  const [mapRows, setmapRows] = useState([]);\r\n  // eslint-disable-next-line\r\n  const APIbody = {\r\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\r\n    organizationId: `${ac.dc.organizationID}`,\r\n    networkId: `${ac.dc.networkID}`,\r\n  };\r\n\r\n  const isFirstRun = useRef(true);\r\n  useEffect(() => {\r\n    if (isFirstRun.current) {\r\n      isFirstRun.current = false;\r\n      return;\r\n    }\r\n    async function APIcall() {\r\n      if (ac.dc.isOrgSelected && ac.dc.isNetSelected === true) {\r\n        setloading(true);\r\n        fetch(\"/vlans\", {\r\n          method: [\"POST\"],\r\n          cache: \"no-cache\",\r\n          headers: {\r\n            content_type: \"application/json\",\r\n          },\r\n          body: JSON.stringify(APIbody),\r\n        }).then((response) => {\r\n          return response.json;\r\n        });\r\n        fetch(\"/vlans\")\r\n          .then((res) => res.json())\r\n          .then((vlans) => {\r\n            ac.dc.setvlanList(vlans.vlans);\r\n\r\n            let row = [];\r\n            // eslint-disable-next-line\r\n            vlans.vlans.map((item) => {\r\n              var rowModel = [\r\n                {\r\n                  Subnet: item.subnet,\r\n                  VlanID: item.id,\r\n                  VlanName: item.name,\r\n                  MX_IP: item.applianceIp,\r\n                  DNS: item.dnsNameservers,\r\n                },\r\n              ];\r\n              row.push(...rowModel);\r\n              setmapRows(row);\r\n            });\r\n          })\r\n\r\n          .then(() => setloading(false))\r\n          .then(() => setshowtable(true))\r\n          .catch((err) => {\r\n            ac.dc.setalert(true);\r\n            console.log(\"this is the err: \", err);\r\n            ac.dc.setloadingButton(false);\r\n          });\r\n      } else {\r\n        ac.dc.setswitchAlertModal(true);\r\n        ac.dc.setswitchToolsTemplate(false);\r\n      }\r\n    }\r\n\r\n    APIcall();\r\n    return () => {\r\n      ac.dc.setvlanList([]);\r\n      setmapRows([]);\r\n      setshowtable(false);\r\n      ac.dc.setalert(false);\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [trigger]);\r\n\r\n  const handleSubnets = (e) => {\r\n    e.preventDefault();\r\n    settrigger(trigger + 1);\r\n  };\r\n\r\n  const datatable = {\r\n    columns: [\r\n      {\r\n        label: \"Subnet\",\r\n        field: \"Subnet\",\r\n        width: 150,\r\n        attributes: {\r\n          \"aria-controls\": \"DataTable\",\r\n          \"aria-label\": \"Description\",\r\n        },\r\n      },\r\n      {\r\n        label: \"VLAN ID\",\r\n        field: \"VlanID\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"VLAN Name\",\r\n        field: \"VlanName\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"MX IP\",\r\n        field: \"MX_IP\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"DNS Servers\",\r\n        field: \"DNS\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n    rows: mapRows,\r\n  };\r\n  return (\r\n    <div id=\"page-inner-main-templates\">\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12\">\r\n          <div className=\"panel panel-default\">\r\n            <div className=\"panel-body\">\r\n              <div className=\"panel-group\" id=\"accordion\">\r\n                <div className=\"panel panel-default\">\r\n                  <div className=\"panel-heading\">\r\n                    <h4 className=\"panel-title-description\">\r\n                      <a\r\n                        data-toggle=\"collapse\"\r\n                        data-parent=\"#accordion\"\r\n                        href=\"#collapseOne\"\r\n                        className=\"collapsed\"\r\n                      >\r\n                        <span className=\"glyphicon glyphicon-info-sign\"></span>\r\n                      </a>\r\n                    </h4>\r\n                  </div>\r\n                  <div id=\"collapseOne\" className=\"panel-collapse collapse\">\r\n                    <div className=\"panel-body\">\r\n                      This scripts iterates through all networks in an\r\n                      organization and print all the subnets and VLANs\r\n                      associated with every organization. The script works only\r\n                      on MX and Z3 devices, does not work on VPN HUBs, the\r\n                      network must be reachable in the Meraki Dashboard.\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                onClick={!loading ? handleSubnets : null}\r\n                disabled={loading}\r\n              >\r\n                {loading && (\r\n                  <i\r\n                    className=\"fa fa-refresh fa-spin\"\r\n                    style={{ marginRight: \"5px\" }}\r\n                  />\r\n                )}\r\n                {loading && <span>Loading Data</span>}\r\n                {!loading && <span>RUN</span>}\r\n              </button>\r\n\r\n              {/* <a\r\n                href=\"#null\"\r\n                className=\"btn btn-primary\"\r\n                // onClick={handleResults}\r\n              >\r\n                Show results\r\n              </a> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12\">\r\n          <div className=\"panel panel-default\">\r\n            {showtable ? (\r\n              <div className=\"panel-body\">\r\n                <MDBDataTableV5\r\n                  hover\r\n                  entriesOptions={[10, 25, 50, 100]}\r\n                  entries={10}\r\n                  pagesAmount={10}\r\n                  data={datatable}\r\n                  pagingTop\r\n                  searchTop\r\n                  searchBottom={false}\r\n                  exportToCSV={true}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div></div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}