{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\nimport AlertModal from \"./components/AlertsModal\";\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"12345\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [timeZone, settimeZone] = useState(0);\n  const [Name, setName] = useState(\"\");\n  const [loginEmail, setloginEmail] = useState(\"\");\n  const [inputKey, setinputKey] = useState();\n  const [inputConfKey, setinputConfKey] = useState();\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchAlertModal, setswitchAlertModal] = useState(true);\n  console.log(\"App -> switchAlertModal\", switchAlertModal);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(false);\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [reports, setreports] = useState([]);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  const [isNetSelected, setisNetSelected] = useState(false);\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`\n  };\n  const APIbody2 = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    \"X-CSRFToken\": \"frollo\",\n    ARG_ORGNAME: `${organization}`,\n    SERIAL_NUM: `${SNtopUsers}`,\n    NET_ID: `${networkID}`,\n    NET_NAME: `${network}`\n  };\n  useEffect(() => {\n    const data = localStorage.getItem(\"my-token\");\n\n    if (data) {\n      setapiKey(JSON.parse(data));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  });\n  useEffect(() => {\n    fetch(\"/organizations\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/organizations\").then(res => res.json()).then(organizations => {\n      setorganizationList(organizations.organizations);\n    }).catch(error => {\n      console.log(error);\n    }); // eslint-disable-next-line\n  }, [apiKey]);\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n\n    fetch(\"/networks\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/networks\").then(res => res.json()).then(network => {\n      const NET = Object.values(network.networks);\n      let networkIDList = []; // eslint-disable-next-line\n\n      NET.map(item => {\n        var IDListModel = [{\n          id: item.id\n        }];\n        networkIDList.push(...IDListModel);\n        setallNetworksIDList(networkIDList);\n      });\n      setnetworkList(network.networks);\n      settimeZone(network.networks[0].timeZone);\n    }); // eslint-disable-next-line\n  }, [organization]);\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n\n    fetch(\"/devices\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/devices\").then(res => res.json()).then(device => {\n      setdeviceList(device.devices);\n      settotalDevices(device.devices.length);\n    }); // eslint-disable-next-line\n  }, [network]);\n  useEffect(() => {\n    if (isOrgSelected && isNetSelected === true) {\n      let Dev1 = {};\n\n      for (var device = 0; device < deviceList.length; device++) {\n        Dev1[device] = deviceList[device];\n        let model = Dev1[device].model;\n\n        if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n          setSNtopUsers(Dev1[device].serial);\n        }\n      }\n    }\n  }, [deviceList, network]);\n  const dc = {\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    Name,\n    setName,\n    loginEmail,\n    setloginEmail,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    switchAlertModal,\n    setswitchAlertModal,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected\n  };\n  return /*#__PURE__*/React.createElement(MainContext.Provider, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AlertModal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Template, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/App.js"],"names":["React","useState","useEffect","useRef","Template","AlertModal","MainContext","createContext","App","InitialKey","apiKey","setapiKey","organizationList","setorganizationList","networkList","setnetworkList","allNetworksIDList","setallNetworksIDList","organization","setorganization","organizationID","setorganizationID","networkID","setnetworkID","network","setnetwork","deviceList","setdeviceList","SNtopUsers","setSNtopUsers","clientList","setclientList","vlanList","setvlanList","allVlanList","setallVlanList","timeZone","settimeZone","Name","setName","loginEmail","setloginEmail","inputKey","setinputKey","inputConfKey","setinputConfKey","isLoggedIn","setisLoggedIn","switchLoginAPI","setswitchLoginAPI","switchDashboard","setswitchDashboard","switchLoggedIn","setswitchLoggedIn","switchLoggedout","setswitchLoggedout","switchToolsTemplate","setswitchToolsTemplate","switchMainTools","setswitchMainTools","switchAlertModal","setswitchAlertModal","console","log","switchswitchChangeApiKey","setswitchswitchChangeApiKey","classLogin","setclassLogin","classDashboard","setclassDashboard","classOrganization","setclassOrganization","classNetwork","setclassNetwork","classToolsTemplate","setclassToolsTemplate","logInlogOut","setlogInlogOut","ulClassorg","setulClassorg","ulClassnet","setulClassnet","totalDevices","settotalDevices","reports","setreports","triggerTopReports","settriggerTopReports","loadingButton","setloadingButton","datab","setdatab","isOrgSelected","setisOrgSelected","isNetSelected","setisNetSelected","APIbody","organizationId","networkId","APIbody2","ARG_ORGNAME","SERIAL_NUM","NET_ID","NET_NAME","data","localStorage","getItem","JSON","parse","setItem","stringify","fetch","method","cache","headers","content_type","body","then","response","json","res","organizations","catch","error","isFirstRunNetwork","current","NET","Object","values","networks","networkIDList","map","item","IDListModel","id","push","isFirstRunDevices","device","devices","length","Dev1","model","startsWith","serial","dc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\nimport AlertModal from \"./components/AlertsModal\";\n\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"12345\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [timeZone, settimeZone] = useState(0);\n  const [Name, setName] = useState(\"\");\n  const [loginEmail, setloginEmail] = useState(\"\");\n  const [inputKey, setinputKey] = useState();\n  const [inputConfKey, setinputConfKey] = useState();\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchAlertModal, setswitchAlertModal] = useState(true);\n  console.log(\"App -> switchAlertModal\", switchAlertModal);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(\n    false\n  );\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [reports, setreports] = useState([]);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  const [isNetSelected, setisNetSelected] = useState(false);\n\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`,\n  };\n\n  const APIbody2 = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    \"X-CSRFToken\": \"frollo\",\n    ARG_ORGNAME: `${organization}`,\n    SERIAL_NUM: `${SNtopUsers}`,\n    NET_ID: `${networkID}`,\n    NET_NAME: `${network}`,\n  };\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"my-token\");\n    if (data) {\n      setapiKey(JSON.parse(data));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  });\n\n  useEffect(() => {\n    fetch(\"/organizations\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(APIbody),\n    }).then((response) => {\n      return response.json;\n    });\n    fetch(\"/organizations\")\n      .then((res) => res.json())\n      .then((organizations) => {\n        setorganizationList(organizations.organizations);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    // eslint-disable-next-line\n  }, [apiKey]);\n\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n    fetch(\"/networks\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(APIbody),\n    }).then((response) => {\n      return response.json;\n    });\n    fetch(\"/networks\")\n      .then((res) => res.json())\n      .then((network) => {\n        const NET = Object.values(network.networks);\n        let networkIDList = [];\n        // eslint-disable-next-line\n        NET.map((item) => {\n          var IDListModel = [\n            {\n              id: item.id,\n            },\n          ];\n          networkIDList.push(...IDListModel);\n          setallNetworksIDList(networkIDList);\n        });\n\n        setnetworkList(network.networks);\n        settimeZone(network.networks[0].timeZone);\n      });\n    // eslint-disable-next-line\n  }, [organization]);\n\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n    fetch(\"/devices\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(APIbody),\n    }).then((response) => {\n      return response.json;\n    });\n    fetch(\"/devices\")\n      .then((res) => res.json())\n      .then((device) => {\n        setdeviceList(device.devices);\n        settotalDevices(device.devices.length);\n      });\n    // eslint-disable-next-line\n  }, [network]);\n\n  useEffect(() => {\n    if (isOrgSelected && isNetSelected === true) {\n      let Dev1 = {};\n      for (var device = 0; device < deviceList.length; device++) {\n        Dev1[device] = deviceList[device];\n        let model = Dev1[device].model;\n        if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n          setSNtopUsers(Dev1[device].serial);\n        }\n      }\n    }\n  }, [deviceList, network]);\n\n  const dc = {\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    Name,\n    setName,\n    loginEmail,\n    setloginEmail,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    switchAlertModal,\n    setswitchAlertModal,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected,\n  };\n\n  return (\n    <MainContext.Provider dc={dc}>\n      <AlertModal />\n      <Template dc={dc} />\n    </MainContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}