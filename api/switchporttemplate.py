#!/usr/bin/env python3
#-*- coding: utf-8 -*-
#
#
# this  script is used to push the configuaration generated by src/components/Tools/SwitchPortTemplate.js

import requests
import json


def deploy(ARG_APIKEY,SERIAL_NUM,payload):

    headers = {
    "Content-Type": "application/json",
    "Accept": "application/json",
    'x-cisco-meraki-api-key': ARG_APIKEY,
    }


    try:
        data = []
        for x in payload:
            
            # delete not necessary entries from payload
            del x['payload']['id']
            del x['payload']['templateName']

            # change condition from enabled/disabled to true/false boolean
            if x['payload']['enabled'] == "Enabled":
                x['payload'].update({'enabled':True})
            else:
                x['payload'].update({'enabled':False})

            if x['payload']['stacking'] == "Enabled":
                x['payload'].update({'stacking':True})
            else:
                x['payload'].update({'stacking':False})

            if x['payload']['poeEnabled'] == "Enabled":
                x['payload'].update({'poeEnabled':True})
            else:
                x['payload'].update({'poeEnabled':False})

            if x['payload']['rstpEnabled'] == "Enabled":
                x['payload'].update({'rstpEnabled':True})
            else:
                x['payload'].update({'rstpEnabled':False})

            if x['payload']['isolationEnabled'] == "Enabled":
                x['payload'].update({'isolationEnabled':True})
            else:
                x['payload'].update({'isolationEnabled':False})

            if x['payload']['trusted'] == "Enabled":
                x['payload'].update({'trusted':True})
            else:
                x['payload'].update({'enabled':False})

            # workaround: remove stormControlEnabled if "Storm control is currently not supported in this network"
            # NOT SURE IF WORKS PROPERLY
            stormControlEnabled = x['payload']['stormControlEnabled']
            if stormControlEnabled == "Enabled":
                x['payload'].update({'stormControlEnabled':True})
            elif stormControlEnabled == "Disabled":
                del x['payload']['stormControlEnabled']
                # x['payload'].update({'stormControlEnabled':False})


            
            if x['payload']['port']['type'] == "Access":
                del x['payload']['port']
                x['payload'].update({"type": "access"})
            elif x['payload']['port']['type'] == "Trunk":
                x['payload'].update({"type": "trunk"})
                x['payload'].update({"allowedVlans": x['payload']['port']['allowedVlans']})
                del x['payload']['port']


            
            # change accessPolicyNumber from Name to number
            if x['payload']['policy']['accessPolicyNumber'] == "HybridAuthISE":
                del x['payload']['policy']
                x['payload'].update({"accessPolicyNumber": 0})
            elif x['payload']['policy']['accessPolicyNumber'] == "Open":
                del x['payload']['policy']
                x['payload'].update({"accessPolicyNumber": 1})
            elif x['payload']['policy']['accessPolicyNumber'] == "MAC Whitelist":
                # convert macaddresses to list
                macs = x['payload']['policy']['macWhitelist']
                maclist = macs.split(sep=",", maxsplit=-1)
                x['payload'].update({"macWhitelist": maclist})
                del x['payload']['policy']
                x['payload'].update({"accessPolicyNumber": 2})
            elif x['payload']['policy']['accessPolicyNumber'] == "Sticky MAC Whitelist":
                # convert macaddresses to list
                macs = x['payload']['policy']['macWhitelist']
                maclist = macs.split(sep=",", maxsplit=-1)
                x['payload'].update({"macWhitelist": maclist})
                x['payload'].update({"stickyMacWhitelistLimit": x['payload']['policy']['stickyMacWhitelistLimit']})
                del x['payload']['policy']
                x['payload'].update({"accessPolicyNumber": 3})
                
            # print(json.dumps(x['payload'],indent=2))
            
            data.append({'port' : x['payload'], 'number' : x['number']} )

        for x in data:
            number = x['number']
            config = json.dumps(x['port'])

            url = f"https://api.meraki.com/api/v0/devices/{SERIAL_NUM}/switchPorts/{number}"
            response = requests.request('PUT', url, headers=headers, data=config)
            print(response.text.encode('utf8'))
            


    except Exception as err:
        print('Exception: ',err)
        

    


