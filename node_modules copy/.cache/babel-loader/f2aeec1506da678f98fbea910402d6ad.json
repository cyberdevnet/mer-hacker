{"ast":null,"code":"'use strict';\n\nrequire('es6-promise').polyfill();\n\nmodule.exports = function (fetch, defaults = {}) {\n  if (typeof fetch !== 'function') {\n    throw new ArgumentError('fetch must be a function');\n  }\n\n  if (typeof defaults !== 'object') {\n    throw new ArgumentError('defaults must be an object');\n  }\n\n  if (defaults.retries !== undefined && !isPositiveInteger(defaults.retries)) {\n    throw new ArgumentError('retries must be a positive integer');\n  }\n\n  if (defaults.retryDelay !== undefined && !isPositiveInteger(defaults.retryDelay) && typeof defaults.retryDelay !== 'function') {\n    throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n  }\n\n  if (defaults.retryOn !== undefined && !Array.isArray(defaults.retryOn) && typeof defaults.retryOn !== 'function') {\n    throw new ArgumentError('retryOn property expects an array or function');\n  }\n\n  const baseDefaults = {\n    retries: 3,\n    retryDelay: 1000,\n    retryOn: []\n  };\n  defaults = Object.assign(baseDefaults, defaults);\n  return function fetchRetry(input, init) {\n    var retries = defaults.retries;\n    var retryDelay = defaults.retryDelay;\n    var retryOn = defaults.retryOn;\n\n    if (init && init.retries !== undefined) {\n      if (isPositiveInteger(init.retries)) {\n        retries = init.retries;\n      } else {\n        throw new ArgumentError('retries must be a positive integer');\n      }\n    }\n\n    if (init && init.retryDelay !== undefined) {\n      if (isPositiveInteger(init.retryDelay) || typeof init.retryDelay === 'function') {\n        retryDelay = init.retryDelay;\n      } else {\n        throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n      }\n    }\n\n    if (init && init.retryOn) {\n      if (Array.isArray(init.retryOn) || typeof init.retryOn === 'function') {\n        retryOn = init.retryOn;\n      } else {\n        throw new ArgumentError('retryOn property expects an array or function');\n      }\n    }\n\n    return new Promise(function (resolve, reject) {\n      var wrappedFetch = function (attempt) {\n        fetch(input, init).then(function (response) {\n          if (Array.isArray(retryOn) && retryOn.indexOf(response.status) === -1) {\n            resolve(response);\n          } else if (typeof retryOn === 'function') {\n            if (retryOn(attempt, null, response)) {\n              retry(attempt, null, response);\n            } else {\n              resolve(response);\n            }\n          } else {\n            if (attempt < retries) {\n              retry(attempt, null, response);\n            } else {\n              resolve(response);\n            }\n          }\n        }).catch(function (error) {\n          if (typeof retryOn === 'function') {\n            if (retryOn(attempt, error, null)) {\n              retry(attempt, error, null);\n            } else {\n              reject(error);\n            }\n          } else if (attempt < retries) {\n            retry(attempt, error, null);\n          } else {\n            reject(error);\n          }\n        });\n      };\n\n      function retry(attempt, error, response) {\n        var delay = typeof retryDelay === 'function' ? retryDelay(attempt, error, response) : retryDelay;\n        setTimeout(function () {\n          wrappedFetch(++attempt);\n        }, delay);\n      }\n\n      wrappedFetch(0);\n    });\n  };\n};\n\nfunction isPositiveInteger(value) {\n  return Number.isInteger(value) && value >= 0;\n}\n\nfunction ArgumentError(message) {\n  this.name = 'ArgumentError';\n  this.message = message;\n}","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/node_modules/fetch-retry/index.js"],"names":["require","polyfill","module","exports","fetch","defaults","ArgumentError","retries","undefined","isPositiveInteger","retryDelay","retryOn","Array","isArray","baseDefaults","Object","assign","fetchRetry","input","init","Promise","resolve","reject","wrappedFetch","attempt","then","response","indexOf","status","retry","catch","error","delay","setTimeout","value","Number","isInteger","message","name"],"mappings":"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","sourcesContent":["'use strict';\nrequire('es6-promise').polyfill();\n\nmodule.exports = function (fetch, defaults = {}) {\n  if (typeof fetch !== 'function') {\n    throw new ArgumentError('fetch must be a function');\n  }\n\n  if (typeof defaults !== 'object') {\n    throw new ArgumentError('defaults must be an object');\n  }\n\n  if (defaults.retries !== undefined && !isPositiveInteger(defaults.retries)) {\n    throw new ArgumentError('retries must be a positive integer');\n  }\n\n  if (defaults.retryDelay !== undefined && !isPositiveInteger(defaults.retryDelay) && typeof defaults.retryDelay !== 'function') {\n    throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n  }\n\n  if (defaults.retryOn !== undefined && !Array.isArray(defaults.retryOn) && typeof defaults.retryOn !== 'function') {\n    throw new ArgumentError('retryOn property expects an array or function');\n  }\n\n  const baseDefaults = {\n    retries: 3,\n    retryDelay: 1000,\n    retryOn: [],\n  };\n  \n  defaults = Object.assign(baseDefaults, defaults);\n\n  return function fetchRetry(input, init) {\n    var retries = defaults.retries;\n    var retryDelay = defaults.retryDelay;\n    var retryOn = defaults.retryOn;\n\n    if (init && init.retries !== undefined) {\n      if (isPositiveInteger(init.retries)) {\n        retries = init.retries;\n      } else {\n        throw new ArgumentError('retries must be a positive integer');\n      }\n    }\n\n    if (init && init.retryDelay !== undefined) {\n      if (isPositiveInteger(init.retryDelay) || (typeof init.retryDelay === 'function')) {\n        retryDelay = init.retryDelay;\n      } else {\n        throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n      }\n    }\n\n    if (init && init.retryOn) {\n      if (Array.isArray(init.retryOn) || (typeof init.retryOn === 'function')) {\n        retryOn = init.retryOn;\n      } else {\n        throw new ArgumentError('retryOn property expects an array or function');\n      }\n    }\n\n    return new Promise(function (resolve, reject) {\n      var wrappedFetch = function (attempt) {\n        fetch(input, init)\n          .then(function (response) {\n            if (Array.isArray(retryOn) && retryOn.indexOf(response.status) === -1) {\n              resolve(response);\n            } else if (typeof retryOn === 'function') {\n              if (retryOn(attempt, null, response)) {\n                retry(attempt, null, response);\n              } else {\n                resolve(response);\n              }\n            } else {\n              if (attempt < retries) {\n                retry(attempt, null, response);\n              } else {\n                resolve(response);\n              }\n            }\n          })\n          .catch(function (error) {\n            if (typeof retryOn === 'function') {\n              if (retryOn(attempt, error, null)) {\n                retry(attempt, error, null);\n              } else {\n                reject(error);\n              }\n            } else if (attempt < retries) {\n              retry(attempt, error, null);\n            } else {\n              reject(error);\n            }\n          });\n      };\n\n      function retry(attempt, error, response) {\n        var delay = (typeof retryDelay === 'function') ?\n          retryDelay(attempt, error, response) : retryDelay;\n        setTimeout(function () {\n          wrappedFetch(++attempt);\n        }, delay);\n      }\n\n      wrappedFetch(0);\n    });\n  };\n};\n\nfunction isPositiveInteger(value) {\n  return Number.isInteger(value) && value >= 0;\n}\n\nfunction ArgumentError(message) {\n  this.name = 'ArgumentError';\n  this.message = message;\n}\n"]},"metadata":{},"sourceType":"script"}