{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\components\\\\Tools\\\\GetAllOrganizationSubnets.js\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { MDBDataTableV5 } from \"mdbreact\";\nexport default function GetAllOrganizationSubnets(ac) {\n  const [showtable, setshowtable] = useState(false);\n  const [trigger, settrigger] = useState(0);\n  const [loading, setloading] = useState(false);\n  const [mapRows, setmapRows] = useState([]); // eslint-disable-next-line\n\n  const [alert, setalert] = useState(false);\n  console.log(\"APIcall -> allVlanList\", ac.dc.allVlanList);\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\n    organizationId: `${ac.dc.organizationID}`,\n    networkId: `${ac.dc.networkID}`\n  };\n\n  const handleOrganizationSubnets = e => {\n    e.preventDefault();\n    settrigger(trigger + 1);\n  };\n\n  useEffect(() => {\n    let isCancelled = false;\n\n    async function APIcall() {\n      try {\n        if (!isCancelled) {\n          setloading(true);\n          fetch(\"/allVlans\", {\n            method: [\"POST\"],\n            cache: \"no-cache\",\n            headers: {\n              content_type: \"application/json\"\n            },\n            body: JSON.stringify(APIbody)\n          }).then(response => {\n            return response.json;\n          });\n          fetch(\"/allVlans\").then(res => res.json()).then(allVlans => {\n            ac.dc.setallVlanList(allVlans.result);\n          }).then(() => setloading(false));\n        }\n      } catch (err) {\n        if (!isCancelled) {\n          setalert(true);\n          console.log(\"APIcall -> err\", err);\n          throw err;\n        }\n      }\n    }\n\n    APIcall();\n    return () => {\n      let isCancelled = true;\n    }; // eslint-disable-next-line\n  }, []);\n  const isFirstRun = useRef(true);\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n\n    async function APIcall() {\n      try {\n        if (trigger === false) {\n          return;\n        }\n\n        setloading(true);\n        fetch(\"/allVlans\", {\n          method: [\"POST\"],\n          cache: \"no-cache\",\n          headers: {\n            content_type: \"application/json\"\n          },\n          body: JSON.stringify(APIbody)\n        }).then(response => {\n          return response.json;\n        });\n        fetch(\"/allVlans\").then(res => res.json()).then(allVlans => {\n          ac.dc.setallVlanList(allVlans.result);\n          let Vlanobjects = {};\n          let Nameobjects = {};\n\n          for (var x = 0; x < allVlans.result.length; x++) {\n            Vlanobjects[x] = allVlans.result[x].allVlans;\n            Nameobjects[x] = allVlans.result[x].networkname;\n          }\n\n          const VLANS = Object.values(Vlanobjects); // const NAMES = Object.values(Nameobjects);\n\n          let row = []; // eslint-disable-next-line\n\n          VLANS.map(item => {\n            row.push(...item);\n          });\n          let row2 = []; // eslint-disable-next-line\n\n          row.map(item => {\n            var rowModel = [{\n              Subnet: item.subnet,\n              VlanID: item.id,\n              VlanName: item.name,\n              MX_IP: item.applianceIp,\n              DNS: item.dnsNameservers,\n              Network: \"Network ---\"\n            }];\n            row2.push(...rowModel);\n            setmapRows(row2);\n          });\n          setshowtable(true);\n        }).then(() => setloading(false));\n      } catch (err) {\n        if (err) {\n          setalert(true);\n        }\n      }\n    }\n\n    APIcall(); // eslint-disable-next-line\n  }, [trigger]);\n  const datatable = {\n    columns: [{\n      label: \"Subnet\",\n      field: \"Subnet\",\n      width: 150,\n      attributes: {\n        \"aria-controls\": \"DataTable\",\n        \"aria-label\": \"Description\"\n      }\n    }, {\n      label: \"VLAN ID\",\n      field: \"VlanID\",\n      sort: \"asc\",\n      width: 270\n    }, {\n      label: \"VLAN Name\",\n      field: \"VlanName\",\n      sort: \"asc\",\n      width: 200\n    }, {\n      label: \"MX IP\",\n      field: \"MX_IP\",\n      sort: \"asc\",\n      width: 100\n    }, {\n      label: \"DNS Servers\",\n      field: \"DNS\",\n      sort: \"asc\",\n      width: 100\n    }, {\n      label: \"Network\",\n      field: \"Network\",\n      sort: \"asc\",\n      width: 100\n    }],\n    rows: mapRows\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-inner-main-templates\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-group\",\n    id: \"accordion\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"panel-title-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    \"data-toggle\": \"collapse\",\n    \"data-parent\": \"#accordion\",\n    href: \"#collapseOne\",\n    className: \"collapsed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 23\n    }\n  }, \"Description\"))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseOne\",\n    className: \"panel-collapse collapse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 21\n    }\n  }, \"This scripts iterates through all networks in an organization and print all the subnets and VLANs associated with every organization. The script works only on MX and Z3 devices, does not work on VPN HUBs, the network must be reachable in the Meraki Dashboard.\")))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: !loading ? handleOrganizationSubnets : null,\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 15\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fa fa-refresh fa-spin\",\n    style: {\n      marginRight: \"5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 19\n    }\n  }), loading && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 29\n    }\n  }, \"Loading Data\"), !loading && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 30\n    }\n  }, \"RUN\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, showtable ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MDBDataTableV5, {\n    hover: true,\n    entriesOptions: [10, 25, 50, 100],\n    entries: 10,\n    pagesAmount: 10,\n    data: datatable,\n    pagingTop: true,\n    searchTop: true,\n    searchBottom: false,\n    exportToCSV: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  })))));\n}","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/components/Tools/GetAllOrganizationSubnets.js"],"names":["React","useEffect","useState","useRef","MDBDataTableV5","GetAllOrganizationSubnets","ac","showtable","setshowtable","trigger","settrigger","loading","setloading","mapRows","setmapRows","alert","setalert","console","log","dc","allVlanList","APIbody","apiKey","organizationId","organizationID","networkId","networkID","handleOrganizationSubnets","e","preventDefault","isCancelled","APIcall","fetch","method","cache","headers","content_type","body","JSON","stringify","then","response","json","res","allVlans","setallVlanList","result","err","isFirstRun","current","Vlanobjects","Nameobjects","x","length","networkname","VLANS","Object","values","row","map","item","push","row2","rowModel","Subnet","subnet","VlanID","id","VlanName","name","MX_IP","applianceIp","DNS","dnsNameservers","Network","datatable","columns","label","field","width","attributes","sort","rows","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { MDBDataTableV5 } from \"mdbreact\";\r\n\r\nexport default function GetAllOrganizationSubnets(ac) {\r\n  const [showtable, setshowtable] = useState(false);\r\n  const [trigger, settrigger] = useState(0);\r\n  const [loading, setloading] = useState(false);\r\n  const [mapRows, setmapRows] = useState([]);\r\n\r\n  // eslint-disable-next-line\r\n  const [alert, setalert] = useState(false);\r\n\r\n  console.log(\"APIcall -> allVlanList\", ac.dc.allVlanList);\r\n\r\n  const APIbody = {\r\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\r\n    organizationId: `${ac.dc.organizationID}`,\r\n    networkId: `${ac.dc.networkID}`,\r\n  };\r\n\r\n  const handleOrganizationSubnets = (e) => {\r\n    e.preventDefault();\r\n    settrigger(trigger + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    async function APIcall() {\r\n      try {\r\n        if (!isCancelled) {\r\n          setloading(true);\r\n          fetch(\"/allVlans\", {\r\n            method: [\"POST\"],\r\n            cache: \"no-cache\",\r\n            headers: {\r\n              content_type: \"application/json\",\r\n            },\r\n            body: JSON.stringify(APIbody),\r\n          }).then((response) => {\r\n            return response.json;\r\n          });\r\n          fetch(\"/allVlans\")\r\n            .then((res) => res.json())\r\n            .then((allVlans) => {\r\n              ac.dc.setallVlanList(allVlans.result);\r\n            })\r\n\r\n            .then(() => setloading(false));\r\n        }\r\n      } catch (err) {\r\n        if (!isCancelled) {\r\n          setalert(true);\r\n          console.log(\"APIcall -> err\", err);\r\n          throw err;\r\n        }\r\n      }\r\n    }\r\n\r\n    APIcall();\r\n    return () => {\r\n      let isCancelled = true;\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const isFirstRun = useRef(true);\r\n  useEffect(() => {\r\n    if (isFirstRun.current) {\r\n      isFirstRun.current = false;\r\n      return;\r\n    }\r\n    async function APIcall() {\r\n      try {\r\n        if (trigger === false) {\r\n          return;\r\n        }\r\n        setloading(true);\r\n        fetch(\"/allVlans\", {\r\n          method: [\"POST\"],\r\n          cache: \"no-cache\",\r\n          headers: {\r\n            content_type: \"application/json\",\r\n          },\r\n          body: JSON.stringify(APIbody),\r\n        }).then((response) => {\r\n          return response.json;\r\n        });\r\n\r\n        fetch(\"/allVlans\")\r\n          .then((res) => res.json())\r\n          .then((allVlans) => {\r\n            ac.dc.setallVlanList(allVlans.result);\r\n\r\n            let Vlanobjects = {};\r\n            let Nameobjects = {};\r\n            for (var x = 0; x < allVlans.result.length; x++) {\r\n              Vlanobjects[x] = allVlans.result[x].allVlans;\r\n              Nameobjects[x] = allVlans.result[x].networkname;\r\n            }\r\n            const VLANS = Object.values(Vlanobjects);\r\n            // const NAMES = Object.values(Nameobjects);\r\n\r\n            let row = [];\r\n            // eslint-disable-next-line\r\n            VLANS.map((item) => {\r\n              row.push(...item);\r\n            });\r\n\r\n            let row2 = [];\r\n            // eslint-disable-next-line\r\n            row.map((item) => {\r\n              var rowModel = [\r\n                {\r\n                  Subnet: item.subnet,\r\n                  VlanID: item.id,\r\n                  VlanName: item.name,\r\n                  MX_IP: item.applianceIp,\r\n                  DNS: item.dnsNameservers,\r\n                  Network: \"Network ---\",\r\n                },\r\n              ];\r\n              row2.push(...rowModel);\r\n              setmapRows(row2);\r\n            });\r\n\r\n            setshowtable(true);\r\n          })\r\n\r\n          .then(() => setloading(false));\r\n      } catch (err) {\r\n        if (err) {\r\n          setalert(true);\r\n        }\r\n      }\r\n    }\r\n    APIcall();\r\n    // eslint-disable-next-line\r\n  }, [trigger]);\r\n\r\n  const datatable = {\r\n    columns: [\r\n      {\r\n        label: \"Subnet\",\r\n        field: \"Subnet\",\r\n        width: 150,\r\n        attributes: {\r\n          \"aria-controls\": \"DataTable\",\r\n          \"aria-label\": \"Description\",\r\n        },\r\n      },\r\n      {\r\n        label: \"VLAN ID\",\r\n        field: \"VlanID\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"VLAN Name\",\r\n        field: \"VlanName\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"MX IP\",\r\n        field: \"MX_IP\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"DNS Servers\",\r\n        field: \"DNS\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Network\",\r\n        field: \"Network\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n    rows: mapRows,\r\n  };\r\n  return (\r\n    <div id=\"page-inner-main-templates\">\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12\">\r\n          <div className=\"panel panel-default\">\r\n            <div className=\"panel-body\">\r\n              <div className=\"panel-group\" id=\"accordion\">\r\n                <div className=\"panel panel-default\">\r\n                  <div className=\"panel-heading\">\r\n                    <h4 className=\"panel-title-description\">\r\n                      <a\r\n                        data-toggle=\"collapse\"\r\n                        data-parent=\"#accordion\"\r\n                        href=\"#collapseOne\"\r\n                        className=\"collapsed\"\r\n                      >\r\n                        Description\r\n                      </a>\r\n                    </h4>\r\n                  </div>\r\n                  <div id=\"collapseOne\" className=\"panel-collapse collapse\">\r\n                    <div className=\"panel-body\">\r\n                      This scripts iterates through all networks in an\r\n                      organization and print all the subnets and VLANs\r\n                      associated with every organization. The script works only\r\n                      on MX and Z3 devices, does not work on VPN HUBs, the\r\n                      network must be reachable in the Meraki Dashboard.\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                onClick={!loading ? handleOrganizationSubnets : null}\r\n                disabled={loading}\r\n              >\r\n                {loading && (\r\n                  <i\r\n                    className=\"fa fa-refresh fa-spin\"\r\n                    style={{ marginRight: \"5px\" }}\r\n                  />\r\n                )}\r\n                {loading && <span>Loading Data</span>}\r\n                {!loading && <span>RUN</span>}\r\n              </button>\r\n\r\n              {/* <a\r\n                  href=\"#null\"\r\n                  className=\"btn btn-primary\"\r\n                  onClick={handleResults}\r\n                >\r\n                  Show results\r\n                </a> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12\">\r\n          <div className=\"panel panel-default\">\r\n            {showtable ? (\r\n              <div className=\"panel-body\">\r\n                <MDBDataTableV5\r\n                  hover\r\n                  entriesOptions={[10, 25, 50, 100]}\r\n                  entries={10}\r\n                  pagesAmount={10}\r\n                  data={datatable}\r\n                  pagingTop\r\n                  searchTop\r\n                  searchBottom={false}\r\n                  exportToCSV={true}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div></div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}