{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"6f0ae10958aba4b7ea4ba50755020f0649465707\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [triggerGetOrg, settriggerGetOrg] = useState(0);\n  const [getOrgStatusCode, setgetOrgStatusCode] = useState(false);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  console.log(\"App -> networkList\", networkList.length);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [hostList, sethostList] = useState([]);\n  console.log(\"App -> hostList\", hostList);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [alert, setalert] = useState(false);\n  const [timeZone, settimeZone] = useState(0);\n  const [inputKey, setinputKey] = useState(\"\");\n  const [inputConfKey, setinputConfKey] = useState(\"\");\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchAlertModal, setswitchAlertModal] = useState(false);\n  const [AlertModalError, setAlertModalError] = useState([]);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(false);\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [totalHosts, settotalHosts] = useState(0);\n  const [reports, setreports] = useState([]);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  const [isNetSelected, setisNetSelected] = useState(false);\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`\n  }; // STORE PERSISTANT VARIABLES ON RE-RENDER\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     const apiKey = localStorage.getItem(\"my-token\");\n  //     if (apiKey) {\n  //       setapiKey(JSON.parse(apiKey));\n  //     }\n  //   }\n  //   // eslint-disable-next-line\n  // }, []);\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  //   }\n  // });\n\n  const isFirstRunOrg = useRef(true);\n  useEffect(() => {\n    // if (isFirstRunOrg.current) {\n    //   isFirstRunOrg.current = false;\n    //   return;\n    // }\n    async function callOrganization() {\n      fetch(\"/organizations\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/organizations\").then(res => {\n        if (!res.ok) {\n          console.log(\"Unable to contact Meraki Cloud\");\n        }\n\n        setgetOrgStatusCode(res.status);\n        return res.json();\n      }) // .then((res) => res.json())\n      .then(organizations => {\n        setorganizationList(organizations.organizations);\n      }).catch(err => {\n        // setalert(true);\n        console.log(\"this is the err: \", err);\n      });\n    }\n\n    callOrganization();\n    return () => {\n      setalert(false);\n      setAlertModalError([]);\n    }; // eslint-disable-next-line\n  }, []); // }, [triggerGetOrg]);\n\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n\n    async function callNetworks() {\n      fetch(\"/networks\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/networks\") // .then((res) => res.json())\n      .then(res => {\n        if (!res.ok) {\n          throw res;\n        }\n\n        return res.json();\n      }).then(network => {\n        console.log(\"callNetworks -> network\", network);\n        const NET = Object.values(network.networks);\n        let networkIDList = []; // eslint-disable-next-line\n\n        NET.map(item => {\n          var IDListModel = [{\n            id: item.id\n          }];\n          networkIDList.push(...IDListModel);\n          setallNetworksIDList(networkIDList);\n        });\n        setnetworkList(network.networks);\n        settimeZone(network.networks[0].timeZone);\n      }).catch(err => {\n        err.json().then(errorMessage => {\n          setAlertModalError(errorMessage);\n          setswitchAlertModal(true);\n        }); // setalert(true);\n\n        console.log(\"this is the err: \", err);\n      });\n      return () => {\n        setalert(false);\n        setAlertModalError([]);\n      };\n    }\n\n    callNetworks(); // eslint-disable-next-line\n  }, [organization]);\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n\n    async function callDevices() {\n      fetch(\"/devices\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/devices\").then(res => res.json()).then(device => {\n        console.log(\"callDevices -> device\", device);\n        setdeviceList(device.devices);\n        settotalDevices(device.devices.length);\n      }).catch(err => {\n        setalert(true);\n        console.log(\"this is the error: \", err);\n      });\n      return () => {\n        setalert(false);\n      };\n    }\n\n    callDevices(); // eslint-disable-next-line\n  }, [network]);\n  const isFirstRunHosts = useRef(true);\n  useEffect(() => {\n    if (isFirstRunHosts.current) {\n      isFirstRunHosts.current = false;\n      return;\n    }\n\n    async function callClients() {\n      fetch(\"/clients\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/clients\").then(res => res.json()).then(clients => {\n        sethostList(clients.clients);\n        settotalHosts(clients.clients.length);\n      }).catch(err => {\n        setalert(true);\n        console.log(\"this is the error: \", err);\n      });\n      return () => {\n        setalert(false);\n      };\n    }\n\n    callClients(); // eslint-disable-next-line\n  }, [network]);\n  useEffect(() => {\n    if (isOrgSelected && isNetSelected === true) {\n      let Dev1 = {};\n\n      for (var device = 0; device < deviceList.length; device++) {\n        Dev1[device] = deviceList[device];\n        let model = Dev1[device].model;\n\n        if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n          setSNtopUsers(Dev1[device].serial);\n        }\n      }\n    } // eslint-disable-next-line\n\n  }, [deviceList, network]);\n  const dc = {\n    triggerGetOrg,\n    settriggerGetOrg,\n    getOrgStatusCode,\n    setgetOrgStatusCode,\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    switchAlertModal,\n    setswitchAlertModal,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected,\n    alert,\n    setalert,\n    AlertModalError,\n    setAlertModalError,\n    hostList,\n    sethostList,\n    totalHosts,\n    settotalHosts\n  };\n  return /*#__PURE__*/React.createElement(MainContext.Provider, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Template, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/App.js"],"names":["React","useState","useEffect","useRef","Template","MainContext","createContext","App","InitialKey","apiKey","setapiKey","triggerGetOrg","settriggerGetOrg","getOrgStatusCode","setgetOrgStatusCode","organizationList","setorganizationList","networkList","setnetworkList","console","log","length","allNetworksIDList","setallNetworksIDList","organization","setorganization","organizationID","setorganizationID","networkID","setnetworkID","network","setnetwork","deviceList","setdeviceList","hostList","sethostList","SNtopUsers","setSNtopUsers","clientList","setclientList","vlanList","setvlanList","allVlanList","setallVlanList","alert","setalert","timeZone","settimeZone","inputKey","setinputKey","inputConfKey","setinputConfKey","isLoggedIn","setisLoggedIn","switchLoginAPI","setswitchLoginAPI","switchDashboard","setswitchDashboard","switchLoggedIn","setswitchLoggedIn","switchLoggedout","setswitchLoggedout","switchToolsTemplate","setswitchToolsTemplate","switchMainTools","setswitchMainTools","switchAlertModal","setswitchAlertModal","AlertModalError","setAlertModalError","switchswitchChangeApiKey","setswitchswitchChangeApiKey","classLogin","setclassLogin","classDashboard","setclassDashboard","classOrganization","setclassOrganization","classNetwork","setclassNetwork","classToolsTemplate","setclassToolsTemplate","logInlogOut","setlogInlogOut","ulClassorg","setulClassorg","ulClassnet","setulClassnet","totalDevices","settotalDevices","totalHosts","settotalHosts","reports","setreports","triggerTopReports","settriggerTopReports","loadingButton","setloadingButton","datab","setdatab","isOrgSelected","setisOrgSelected","isNetSelected","setisNetSelected","APIbody","organizationId","networkId","isFirstRunOrg","callOrganization","fetch","method","cache","headers","content_type","body","JSON","stringify","then","response","json","res","ok","status","organizations","catch","err","isFirstRunNetwork","current","callNetworks","NET","Object","values","networks","networkIDList","map","item","IDListModel","id","push","errorMessage","isFirstRunDevices","callDevices","device","devices","isFirstRunHosts","callClients","clients","Dev1","model","startsWith","serial","dc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\n\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"6f0ae10958aba4b7ea4ba50755020f0649465707\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [triggerGetOrg, settriggerGetOrg] = useState(0);\n  const [getOrgStatusCode, setgetOrgStatusCode] = useState(false);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  console.log(\"App -> networkList\", networkList.length);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [hostList, sethostList] = useState([]);\n  console.log(\"App -> hostList\", hostList);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [alert, setalert] = useState(false);\n  const [timeZone, settimeZone] = useState(0);\n  const [inputKey, setinputKey] = useState(\"\");\n  const [inputConfKey, setinputConfKey] = useState(\"\");\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchAlertModal, setswitchAlertModal] = useState(false);\n  const [AlertModalError, setAlertModalError] = useState([]);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(\n    false\n  );\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [totalHosts, settotalHosts] = useState(0);\n  const [reports, setreports] = useState([]);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  const [isNetSelected, setisNetSelected] = useState(false);\n\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`,\n  };\n\n  // STORE PERSISTANT VARIABLES ON RE-RENDER\n\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     const apiKey = localStorage.getItem(\"my-token\");\n  //     if (apiKey) {\n  //       setapiKey(JSON.parse(apiKey));\n  //     }\n  //   }\n  //   // eslint-disable-next-line\n  // }, []);\n\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  //   }\n  // });\n\n  const isFirstRunOrg = useRef(true);\n\n  useEffect(() => {\n    // if (isFirstRunOrg.current) {\n    //   isFirstRunOrg.current = false;\n    //   return;\n    // }\n    async function callOrganization() {\n      fetch(\"/organizations\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/organizations\")\n        .then((res) => {\n          if (!res.ok) {\n            console.log(\"Unable to contact Meraki Cloud\");\n          }\n          setgetOrgStatusCode(res.status);\n          return res.json();\n        })\n        // .then((res) => res.json())\n        .then((organizations) => {\n          setorganizationList(organizations.organizations);\n        })\n        .catch((err) => {\n          // setalert(true);\n          console.log(\"this is the err: \", err);\n        });\n    }\n    callOrganization();\n    return () => {\n      setalert(false);\n      setAlertModalError([]);\n    };\n    // eslint-disable-next-line\n  }, []);\n  // }, [triggerGetOrg]);\n\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n    async function callNetworks() {\n      fetch(\"/networks\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/networks\")\n        // .then((res) => res.json())\n        .then((res) => {\n          if (!res.ok) {\n            throw res;\n          }\n          return res.json();\n        })\n        .then((network) => {\n          console.log(\"callNetworks -> network\", network);\n          const NET = Object.values(network.networks);\n          let networkIDList = [];\n          // eslint-disable-next-line\n          NET.map((item) => {\n            var IDListModel = [\n              {\n                id: item.id,\n              },\n            ];\n            networkIDList.push(...IDListModel);\n            setallNetworksIDList(networkIDList);\n          });\n\n          setnetworkList(network.networks);\n          settimeZone(network.networks[0].timeZone);\n        })\n        .catch((err) => {\n          err.json().then((errorMessage) => {\n            setAlertModalError(errorMessage);\n            setswitchAlertModal(true);\n          });\n          // setalert(true);\n          console.log(\"this is the err: \", err);\n        });\n      return () => {\n        setalert(false);\n        setAlertModalError([]);\n      };\n    }\n    callNetworks();\n\n    // eslint-disable-next-line\n  }, [organization]);\n\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n    async function callDevices() {\n      fetch(\"/devices\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/devices\")\n        .then((res) => res.json())\n        .then((device) => {\n          console.log(\"callDevices -> device\", device);\n          setdeviceList(device.devices);\n          settotalDevices(device.devices.length);\n        })\n        .catch((err) => {\n          setalert(true);\n          console.log(\"this is the error: \", err);\n        });\n      return () => {\n        setalert(false);\n      };\n    }\n    callDevices();\n\n    // eslint-disable-next-line\n  }, [network]);\n\n  const isFirstRunHosts = useRef(true);\n  useEffect(() => {\n    if (isFirstRunHosts.current) {\n      isFirstRunHosts.current = false;\n      return;\n    }\n    async function callClients() {\n      fetch(\"/clients\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/clients\")\n        .then((res) => res.json())\n        .then((clients) => {\n          sethostList(clients.clients);\n          settotalHosts(clients.clients.length);\n        })\n        .catch((err) => {\n          setalert(true);\n          console.log(\"this is the error: \", err);\n        });\n      return () => {\n        setalert(false);\n      };\n    }\n    callClients();\n\n    // eslint-disable-next-line\n  }, [network]);\n\n  useEffect(() => {\n    if (isOrgSelected && isNetSelected === true) {\n      let Dev1 = {};\n      for (var device = 0; device < deviceList.length; device++) {\n        Dev1[device] = deviceList[device];\n        let model = Dev1[device].model;\n        if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n          setSNtopUsers(Dev1[device].serial);\n        }\n      }\n    }\n    // eslint-disable-next-line\n  }, [deviceList, network]);\n\n  const dc = {\n    triggerGetOrg,\n    settriggerGetOrg,\n    getOrgStatusCode,\n    setgetOrgStatusCode,\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    switchAlertModal,\n    setswitchAlertModal,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected,\n    alert,\n    setalert,\n    AlertModalError,\n    setAlertModalError,\n    hostList,\n    sethostList,\n    totalHosts,\n    settotalHosts,\n  };\n\n  return (\n    <MainContext.Provider dc={dc}>\n      <Template dc={dc} />\n    </MainContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}