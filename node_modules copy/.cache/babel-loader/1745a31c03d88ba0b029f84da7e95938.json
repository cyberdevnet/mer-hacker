{"ast":null,"code":"'use strict';\n\nconst axios = require('axios');\n\nconst JSONbig = require('json-bigint');\n\nconst ERRORS = {\n  INVALID_API_KEY: 'Invalid API Key specified!'\n};\n\nconst ensureValueVerbose = (testVal, truthyVal, falseyVal) => typeof testVal !== 'undefined' ? truthyVal : falseyVal;\n\nfunction MerakiDashboard(apiKey) {\n  if (typeof apiKey !== 'string' || apiKey.trim().length === 0) throw new Error(ERRORS.INVALID_API_KEY);\n  apiKey = apiKey.trim();\n  const dashboard = {};\n\n  const dataProcessor = response => response.data;\n\n  const errorProcessor = response => {\n    delete response.response.request;\n    return Promise.reject(response.response);\n  };\n\n  const rest = {\n    client: axios.create({\n      baseURL: 'https://api.meraki.com/api/v0/',\n      headers: {\n        'X-Cisco-Meraki-API-Key': apiKey,\n        'Content-Type': 'application/json; charset=utf-8',\n        'Accept': 'application/json'\n      },\n      transformResponse: [JSONbig.parse]\n    }),\n    get: function (url, params) {\n      return this.client.get(url, {\n        params\n      }).then(dataProcessor).catch(errorProcessor);\n    },\n    post: function (url, params) {\n      return this.client.post(url, params).then(dataProcessor).catch(errorProcessor);\n    },\n    put: function (url, params) {\n      return this.client.put(url, params).then(dataProcessor).catch(errorProcessor);\n    },\n    delete: function (url) {\n      return this.client.delete(url).then(dataProcessor).catch(errorProcessor);\n    }\n  };\n  dashboard.api_usage = {\n    api_requests: (organization_id, params) => rest.get(`/organizations/${organization_id}/apiRequests`, params)\n  };\n  dashboard.admins = {\n    list: organization_id => rest.get(`/organizations/${organization_id}/admins`),\n    create: (organization_id, params) => rest.post(`/organizations/${organization_id}/admins`, params),\n    update: (organization_id, admin_id, params) => rest.put(`/organizations/${organization_id}/admins/${admin_id}`, params),\n    revoke: (organization_id, admin_id) => rest.delete(`/organizations/${organization_id}/admins/${admin_id}`)\n  };\n  dashboard.alert_settings = {\n    get: network_id => rest.get(`/networks/${network_id}/alertSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/alertSettings`, params)\n  };\n  dashboard.action_batches = {\n    list: organization_id => rest.get(`/organizations/${organization_id}/actionBatches`),\n    get: (organization_id, action_batch_id) => rest.get(`/organizations/${organization_id}/actionBatches/${action_batch_id}`),\n    create: (organization_id, params) => rest.post(`/organizations/${organization_id}/actionBatches`, params),\n    update: (organization_id, action_batch_id, params) => rest.put(`/organizations/${organization_id}/actionBatches/${action_batch_id}`, params),\n    delete: (organization_id, action_batch_id) => rest.delete(`/organizations/${organization_id}/actionBatches/${action_batch_id}`)\n  };\n  dashboard.bluetooth_clients = {\n    list: (network_id, params) => rest.get(`/networks/${network_id}/bluetoothClients`, params),\n    get: (network_id, client_mac, params) => rest.get(`/networks/${network_id}/bluetoothClients/${client_mac}`, params)\n  };\n  dashboard.cameras = {\n    videoLink: (network_id, serial, timestamp) => rest.get(`/networks/${network_id}/cameras/${serial}/videoLink`, ensureValueVerbose(timestamp, {\n      timestamp\n    }, {})),\n    snapshot: (network_id, serial, timestamp) => rest.post(`/networks/${network_id}/cameras/${serial}/snapshot`, ensureValueVerbose(timestamp, {\n      timestamp\n    }, {}))\n  };\n  dashboard.clients = {\n    list: (serial, timespan) => rest.get(`/devices/${serial}/clients`, ensureValueVerbose(timespan, {\n      timespan\n    }, {})),\n    get: (network_id, client_id_or_mac_or_ip) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}`),\n    provision: (network_id, params) => rest.post(`/networks/${network_id}/clients/provision`, params),\n    usageHistory: (network_id, client_id_or_mac_or_ip) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}/usageHistory`),\n    trafficHistory: (network_id, client_id_or_mac_or_ip, params) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}/trafficHistory`, params),\n    events: (network_id, client_id_or_mac_or_ip, params) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}/events`, params),\n    latencyHistory: (network_id, client_id_or_mac_or_ip, params) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}/latencyHistory`, params),\n    securityEvents: (network_id, client_id, params) => rest.get(`/networks/${network_id}/clients/${client_id}/securityEvents`, params),\n    getPolicy: (network_id, client_mac, timespan) => rest.get(`/networks/${network_id}/clients/${client_mac}/policy`, ensureValueVerbose(timespan, {\n      timespan\n    }, {})),\n    updatePolicy: (network_id, client_mac, params) => rest.put(`/networks/${network_id}/clients/${client_mac}/policy`, params),\n    getSplashAuth: (network_id, client_mac) => rest.get(`/networks/${network_id}/clients/${client_mac}/splashAuthorizationStatus`),\n    updateSplashAuth: (network_id, client_mac, params) => rest.put(`/networks/${network_id}/clients/${client_mac}/splashAuthorizationStatus`, params),\n    usedNetwork: (network_id, params) => rest.get(`/networks/${network_id}/clients`, params)\n  };\n  dashboard.config_templates = {\n    list: organization_id => rest.get(`/organizations/${organization_id}/configTemplates`),\n    remove: (organization_id, template_id) => rest.delete(`/organizations/${organization_id}/configTemplates/${template_id}`)\n  };\n  dashboard.content_filtering = {\n    categories: {\n      get: network_id => rest.get(`/networks/${network_id}/contentFiltering/categories`)\n    },\n    rules: {\n      get: network_id => rest.get(`/networks/${network_id}/contentFiltering`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/contentFiltering`, params)\n    }\n  };\n  dashboard.devices = {\n    listByOrganization: (organization_id, params) => rest.get(`/organizations/${organization_id}/devices`, params),\n    listByNetwork: network_id => rest.get(`/networks/${network_id}/devices`),\n    get: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}`),\n    getUplinkInfo: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}/uplink`),\n    update: (network_id, serial, params) => rest.put(`/networks/${network_id}/devices/${serial}`, params),\n    claim: (network_id, params) => rest.post(`/networks/${network_id}/devices/claim`, params),\n    remove: (network_id, serial) => rest.post(`/networks/${network_id}/devices/${serial}/remove`),\n    lldpCdpInfo: (network_id, serial, timespan) => rest.get(`/networks/${network_id}/devices/${serial}/lldp_cdp`, ensureValueVerbose(timespan, {\n      timespan\n    }, {})),\n    lossAndLatencyHistory: (network_id, serial, params) => rest.get(`/networks/${network_id}/devices/${serial}/lossAndLatencyHistory`, params),\n    performanceScore: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}/performance`),\n    blinkLeds: (network_id, serial, params) => rest.post(`/networks/${network_id}/devices/${serial}/blinkLeds`, params),\n    reboot: (network_id, serial) => rest.post(`/networks/${network_id}/devices/${serial}/reboot`)\n  };\n  dashboard.firewalled_services = {\n    list: network_id => rest.get(`/networks/${network_id}/firewalledServices`),\n    get: (network_id, service) => rest.get(`/networks/${network_id}/firewalledServices/${service}`),\n    update: (network_id, service, params) => rest.put(`/networks/${network_id}/firewalledServices/${service}`, params)\n  };\n  dashboard.group_policies = {\n    list: network_id => rest.get(`/networks/${network_id}/groupPolicies`),\n    get: (network_id, group_policy_id) => rest.get(`/networks/${network_id}/groupPolicies/${group_policy_id}`),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/groupPolicies`, params),\n    update: (network_id, group_policy_id, params) => rest.put(`/networks/${network_id}/groupPolicies/${group_policy_id}`, params),\n    delete: (network_id, group_policy_id) => rest.delete(`/networks/${network_id}/groupPolicies/${group_policy_id}`)\n  };\n  dashboard.http_servers = {\n    list: network_id => rest.get(`/networks/${network_id}/httpServers`),\n    get: (network_id, server_id) => rest.get(`/networks/${network_id}/httpServers/${server_id}`),\n    update: (network_id, server_id, params) => rest.put(`/networks/${network_id}/httpServers/${server_id}`, params),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/httpServers`, params),\n    delete: (network_id, server_id) => rest.delete(`/networks/${network_id}/httpServers/${server_id}`),\n    test: (network_id, url) => rest.post(`/networks/${network_id}/httpServers/webhookTests`, ensureValueVerbose(url, {\n      url\n    }, {})),\n    testStatus: (network_id, test_id) => rest.get(`/networks/${network_id}/httpServers/webhookTests/${test_id}`)\n  };\n  dashboard.intrusion_settings = {\n    organization: {\n      get: organization_id => rest.get(`/organizations/${organization_id}/security/intrusionSettings`),\n      update: (organization_id, params) => rest.put(`/organizations/${organization_id}/security/intrusionSettings`, params)\n    },\n    mx_network: {\n      get: network_id => rest.get(`/networks/${network_id}/security/intrusionSettings`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/security/intrusionSettings`, params)\n    }\n  };\n  dashboard.malware_settings = {\n    get: network_id => rest.get(`/networks/${network_id}/security/malwareSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/security/malwareSettings`, params)\n  };\n  dashboard.management_settings = {\n    get: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}/managementInterfaceSettings`),\n    update: (network_id, serial, params) => rest.put(`/networks/${network_id}/devices/${serial}/managementInterfaceSettings`, params)\n  };\n  dashboard.meraki_auth = {\n    listUsers: network_id => rest.get(`/networks/${network_id}/merakiAuthUsers`),\n    getUser: (network_id, user_id) => rest.get(`/networks/${network_id}/merakiAuthUsers/${user_id}`)\n  };\n  dashboard.mr_l3_firewall = {\n    getRules: (network_id, ssid) => rest.get(`/networks/${network_id}/ssids/${ssid}/l3FirewallRules`),\n    updateRules: (network_id, ssid, params) => rest.put(`/networks/${network_id}/ssids/${ssid}/l3FirewallRules`, params)\n  };\n  dashboard.mv_sense = {\n    overview: serial => rest.get(`/devices/${serial}/camera/analytics/overview`),\n    zones: serial => rest.get(`/devices/${serial}/camera/analytics/zones`),\n    historicalRecords: (serial, zone_id, params) => rest.get(`/devices/${serial}/camera/analytics/zones/${zone_id}/history`, params),\n    recentRecords: serial => rest.get(`/devices/${serial}/camera/analytics/recent`),\n    liveRecords: serial => rest.get(`/devices/${serial}/camera/analytics/live`)\n  };\n  dashboard.mx_nat_rules = {\n    one_to_one: {\n      get: network_id => rest.get(`/networks/${network_id}/oneToOneNatRules`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/oneToOneNatRules`, params)\n    },\n    one_to_many: {\n      get: network_id => rest.get(`/networks/${network_id}/oneToManyNatRules`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/oneToManyNatRules`, params)\n    }\n  };\n  dashboard.mx_l3_firewall = {\n    getRules: network_id => rest.get(`/networks/${network_id}/l3FirewallRules`),\n    updateRules: (network_id, params) => rest.put(`/networks/${network_id}/l3FirewallRules`, params)\n  };\n  dashboard.mx_l7_app_categories = {\n    list: network_id => rest.get(`/networks/${network_id}/l7FirewallRules/applicationCategories`)\n  };\n  dashboard.mx_l7_firewall = {\n    getRules: network_id => rest.get(`/networks/${network_id}/l7FirewallRules`),\n    updateRules: (network_id, params) => rest.put(`/networks/${network_id}/l7FirewallRules`, params)\n  };\n  dashboard.mx_vpn_firewall = {\n    getRules: organization_id => rest.get(`/organizations/${organization_id}/vpnFirewallRules`),\n    updateRules: (organization_id, params) => rest.put(`/organizations/${organization_id}/vpnFirewallRules`, params)\n  };\n  dashboard.mx_cellular_firewall = {\n    getRules: network_id => rest.get(`/networks/${network_id}/cellularFirewallRules`),\n    updateRules: (network_id, params) => rest.put(`/networks/${network_id}/cellularFirewallRules`, params)\n  };\n  dashboard.mx_port_forwarding = {\n    getRules: network_id => rest.get(`/networks/${network_id}/portForwardingRules`),\n    updateRules: (network_id, params) => rest.put(`/networks/${network_id}/portForwardingRules`, params)\n  };\n  dashboard.named_tag_scope = {\n    list: (network_id, with_details) => rest.get(`/networks/${network_id}/sm/targetGroups`, ensureValueVerbose(with_details, {\n      withDetails: with_details\n    }, {})),\n    get: (network_id, named_tag_scope_id, with_details) => rest.get(`/networks/${network_id}/sm/targetGroups/${named_tag_scope_id}`, ensureValueVerbose(with_details, {\n      withDetails: with_details\n    }, {})),\n    update: (network_id, named_tag_scope_id, params) => rest.put(`/networks/${network_id}/sm/targetGroups/${named_tag_scope_id}`, params),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/sm/targetGroups`, params),\n    delete: (network_id, named_tag_scope_id) => rest.delete(`/networks/${network_id}/sm/targetGroups/${named_tag_scope_id}`)\n  };\n  dashboard.netflow_settings = {\n    get: network_id => rest.get(`/networks/${network_id}/netflowSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/netflowSettings`, params)\n  };\n  dashboard.networks = {\n    list: organization_id => rest.get(`/organizations/${organization_id}/networks`),\n    get: network_id => rest.get(`/networks/${network_id}`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}`, params),\n    create: (organization_id, params) => rest.post(`/organizations/${organization_id}/networks`, params),\n    delete: network_id => rest.delete(`/networks/${network_id}`),\n    bindToTemplate: (network_id, params) => rest.post(`/networks/${network_id}/bind`, params),\n    unbindFromTemplate: network_id => rest.post(`/networks/${network_id}/unbind`),\n    getSiteToSiteVpn: network_id => rest.get(`/networks/${network_id}/siteToSiteVpn`),\n    updateSiteToSiteVpn: (network_id, params) => rest.put(`/networks/${network_id}/siteToSiteVpn`, params),\n    getTrafficData: (network_id, params) => rest.get(`/networks/${network_id}/traffic`, params),\n    listAccessPolicies: network_id => rest.get(`/networks/${network_id}/accessPolicies`),\n    listAirMarshalScanResults: (network_id, timespan) => rest.get(`/networks/${network_id}/airMarshal`, ensureValueVerbose(timespan, {\n      timespan\n    }, {})),\n    getBluetoothSettings: network_id => rest.get(`/networks/${network_id}/bluetoothSettings`),\n    updateBluetoothSettings: (network_id, params) => rest.put(`/networks/${network_id}/bluetoothSettings`, params),\n    combineNetworks: (organization_id, params) => rest.post(`/organizations/${organization_id}/networks/combine`, params),\n    splitNetwork: network_id => rest.post(`/networks/${network_id}/split`)\n  };\n  dashboard.openapi_spec = {\n    get: organization_id => rest.get(`/organizations/${organization_id}/openapiSpec`)\n  };\n  dashboard.organizations = {\n    list: () => rest.get(`/organizations`),\n    get: organization_id => rest.get(`/organizations/${organization_id}`),\n    create: params => rest.post(`/organizations`, params),\n    update: (organization_id, params) => rest.put(`/organizations/${organization_id}`, params),\n    delete: organization_id => rest.delete(`/organizations/${organization_id}`),\n    clone: (organization_id, params) => rest.post(`/organizations/${organization_id}/clone`, params),\n    claimDevice: (organization_id, params) => rest.post(`/organizations/${organization_id}/claim`, params),\n    getLicenseState: organization_id => rest.get(`/organizations/${organization_id}/licenseState`),\n    getInventory: organization_id => rest.get(`/organizations/${organization_id}/inventory`),\n    getDeviceStatuses: organization_id => rest.get(`/organizations/${organization_id}/deviceStatuses`),\n    getSnmpSettings: organization_id => rest.get(`/organizations/${organization_id}/snmp`),\n    updateSnmpSettings: (organization_id, params) => rest.put(`/organizations/${organization_id}/snmp`, params),\n    getUplinkLossLatency: (organization_id, params) => rest.get(`/organizations/${organization_id}/uplinksLossAndLatency`, params),\n    getThirdPartyVpnPeers: organization_id => rest.get(`/organizations/${organization_id}/thirdPartyVPNPeers`),\n    updateThirdPartyVpnPeers: (organization_id, params) => rest.put(`/organizations/${organization_id}/thirdPartyVPNPeers`, params)\n  };\n  dashboard.phone_announcements = {\n    list: network_id => rest.get(`/networks/${network_id}/phoneAnnouncements`),\n    add: (network_id, name) => rest.post(`/networks/${network_id}/phoneAnnouncements`, ensureValueVerbose(name, {\n      name\n    }, {})),\n    delete: (network_id, group_id) => rest.delete(`/networks/${network_id}/phoneAnnouncements/${group_id}`)\n  };\n  dashboard.phone_assignments = {\n    list: network_id => rest.get(`/networks/${network_id}/phoneAssignments`),\n    get: (network_id, serial) => rest.get(`/networks/${network_id}/phoneAssignments/${serial}`),\n    assign: (network_id, serial, params) => rest.put(`/networks/${network_id}/phoneAssignments/${serial}`, params),\n    delete: (network_id, serial) => rest.delete(`/networks/${network_id}/phoneAssignments/${serial}`)\n  };\n  dashboard.phone_callgroups = {\n    list: network_id => rest.get(`/networks/${network_id}/phoneCallgroups`),\n    get: (network_id, call_group_id) => rest.get(`/networks/${network_id}/phoneCallgroups/${call_group_id}`),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/phoneCallgroups`, params),\n    update: (network_id, call_group_id, params) => rest.put(`/networks/${network_id}/phoneCallgroups/${call_group_id}`, params),\n    delete: (network_id, call_group_id) => rest.delete(`/networks/${network_id}/phoneCallgroups/${call_group_id}`)\n  };\n  dashboard.phone_comference_rooms = {\n    list: network_id => rest.get(`/networks/${network_id}/phoneConferenceRooms`),\n    get: (network_id, room_id) => rest.get(`/networks/${network_id}/phoneConferenceRooms/${room_id}`),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/phoneConferenceRooms`, params),\n    update: (network_id, room_id, params) => rest.put(`/networks/${network_id}/phoneConferenceRooms/${room_id}`, params),\n    delete: (network_id, room_id) => rest.delete(`/networks/${network_id}/phoneConferenceRooms/${room_id}`)\n  };\n  dashboard.phone_contacts = {\n    list: network_id => rest.get(`/networks/${network_id}/phoneContacts`),\n    add: (network_id, name) => rest.post(`/networks/${network_id}/phoneContacts`, ensureValueVerbose(name, {\n      name\n    }, {})),\n    update: (network_id, contact_id, name) => rest.put(`/networks/${network_id}/phoneContacts/${contact_id}`, ensureValueVerbose(name, {\n      name\n    }, {})),\n    delete: (network_id, contact_id) => rest.delete(`/networks/${network_id}/phoneContacts/${contact_id}`)\n  };\n  dashboard.phone_numbers = {\n    listAll: network_id => rest.get(`/networks/${network_id}/phoneNumbers`),\n    listAvailable: network_id => rest.get(`/networks/${network_id}/phoneNumbers/available`)\n  };\n  dashboard.pii = {\n    organizations: {\n      list: (organization_id, params) => rest.get(`/organizations/${organization_id}/pii/piiKeys`, params),\n      getDeviceId: (organization_id, params) => rest.get(`/organizations/${organization_id}/pii/smDevicesForKey`, params),\n      listSMOwners: (organization_id, params) => rest.get(`/organizations/${organization_id}/pii/smOwnersForKey`, params),\n      listRequests: organization_id => rest.get(`/organizations/${organization_id}/pii/requests`),\n      getRequest: (organization_id, request_id) => rest.get(`/organizations/${organization_id}/pii/requests/${request_id}`),\n      submitRequest: (organization_id, params) => rest.post(`/organizations/${organization_id}/pii/requests`, params),\n      deleteRequest: (organization_id, request_id) => rest.delete(`/organizations/${organization_id}/pii/requests/${request_id}`)\n    },\n    networks: {\n      list: (network_id, params) => rest.get(`/networks/${network_id}/pii/piiKeys`, params),\n      getDeviceId: (network_id, params) => rest.get(`/networks/${network_id}/pii/smDevicesForKey`, params),\n      listSMOwners: (network_id, params) => rest.get(`/networks/${network_id}/pii/smOwnersForKey`, params),\n      listRequests: network_id => rest.get(`/networks/${network_id}/pii/requests`),\n      getRequest: (network_id, request_id) => rest.get(`/networks/${network_id}/pii/requests/${request_id}`),\n      submitRequest: (network_id, params) => rest.post(`/networks/${network_id}/pii/requests`, params),\n      deleteRequest: (network_id, request_id) => rest.delete(`/networks/${network_id}/pii/requests/${request_id}`)\n    }\n  };\n  dashboard.saml_roles = {\n    list: organization_id => rest.get(`/organizations/${organization_id}/samlRoles`),\n    get: (organization_id, role_id) => rest.get(`/organizations/${organization_id}/samlRoles/${role_id}`),\n    update: (organization_id, role_id, params) => rest.put(`/organizations/${organization_id}/samlRoles/${role_id}`, params),\n    create: (organization_id, params) => rest.post(`/organizations/${organization_id}/samlRoles`, params),\n    delete: (organization_id, role_id) => rest.delete(`/organizations/${organization_id}/samlRoles/${role_id}`)\n  };\n  dashboard.sm = {\n    cisco_clarity: {\n      createProfile: (network_id, params) => rest.post(`/networks/${network_id}/sm/profile/clarity`, params),\n      updateProfile: (network_id, profile_id, params) => rest.put(`/networks/${network_id}/sm/profile/clarity/${profile_id}`, params),\n      addPayload: (network_id, profile_id, params) => rest.post(`/networks/${network_id}/sm/profile/clarity/${profile_id}`, params),\n      getPayloadDetails: (network_id, profile_id) => rest.get(`/networks/${network_id}/sm/profile/clarity/${profile_id}`),\n      deletePayload: (network_id, profile_id) => rest.delete(`/networks/${network_id}/sm/profile/clarity/${profile_id}`)\n    },\n    cisco_umbrella: {\n      createProfile: (network_id, params) => rest.post(`/networks/${network_id}/sm/profile/umbrella`, params),\n      updateProfile: (network_id, profile_id, params) => rest.put(`/networks/${network_id}/sm/profile/umbrella/${profile_id}`, params),\n      addPayload: (network_id, profile_id, params) => rest.post(`/networks/${network_id}/sm/profile/umbrella/${profile_id}`, params),\n      getPayloadDetails: (network_id, profile_id) => rest.get(`/networks/${network_id}/sm/profile/umbrella/${profile_id}`),\n      deletePayload: (network_id, profile_id) => rest.delete(`/networks/${network_id}/sm/profile/umbrella/${profile_id}`)\n    },\n    cisco_polaris: {\n      createApp: (network_id, params) => rest.post(`/networks/${network_id}/sm/app/polaris`, params),\n      updateApp: (network_id, app_id, params) => rest.put(`/networks/${network_id}/sm/app/polaris/${app_id}`, params),\n      getAppDetails: (network_id, bundle_id) => rest.get(`/networks/${network_id}/sm/app/polaris`, ensureValueVerbose(bundle_id, {\n        bundleId: bundle_id\n      }, {})),\n      deleteApp: (network_id, app_id) => rest.delete(`/networks/${network_id}/sm/app/polaris/${app_id}`)\n    },\n    device: {\n      networkAdapters: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/networkAdapters`),\n      wlanLists: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/wlanLists`),\n      securityCenters: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/securityCenters`),\n      restrictions: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/restrictions`),\n      certs: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/certs`),\n      cellularUsage: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/cellularUsageHistory`),\n      performanceHistory: (network_id, device_id, params) => rest.get(`/networks/${network_id}/sm/${device_id}/performanceHistory`, params),\n      desktopLogs: (network_id, device_id, params) => rest.get(`/networks/${network_id}/sm/${device_id}/desktopLogs`, params),\n      commandLogs: (network_id, device_id, params) => rest.get(`/networks/${network_id}/sm/${device_id}/deviceCommandLogs`, params),\n      connectivityHistory: (network_id, device_id, params) => rest.get(`/networks/${network_id}/sm/${device_id}/connectivity`, params),\n      unenroll: (network_id, device_id) => rest.post(`/networks/${network_id}/sm/devices/${device_id}/unenroll`)\n    },\n    listDevices: network_id => rest.get(`/networks/${network_id}/sm/devices`),\n    listOwners: (network_id, params) => rest.get(`/networks/${network_id}/sm/users`, params),\n    listProfilesByUser: (network_id, user_id) => rest.get(`/networks/${network_id}/sm/user/${user_id}/deviceProfiles`),\n    listProfilesByDevice: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/deviceProfiles`),\n    listSoftwareByUser: (network_id, user_id) => rest.get(`/networks/${network_id}/sm/user/${user_id}/softwares`),\n    listSoftwareByDevice: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/softwares`),\n    editTags: (network_id, params) => rest.put(`/networks/${network_id}/sm/devices/tags`, params),\n    editFields: (network_id, params) => rest.put(`/networks/${network_id}/sm/device/fields`, params),\n    lockDevices: (network_id, params) => rest.put(`/networks/${network_id}/sm/devices/lock`, params),\n    wipeDevice: (network_id, params) => rest.put(`/networks/${network_id}/sm/device/wipe`, params),\n    forceCheckInDevices: (network_id, params) => rest.put(`/networks/${network_id}/sm/devices/checkin`, params),\n    moveDevices: (network_id, params) => rest.put(`/networks/${network_id}/sm/devices/move`, params),\n    listProfiles: network_id => rest.get(`/networks/${network_id}/sm/profiles`),\n    bypassLockAttempt: (network_id, ids) => rest.post(`/networks/${network_id}/sm/bypassActivationLockAttempts`, ensureValueVerbose(ids, {\n      ids\n    }, {})),\n    bypassLockAttemptStatus: (network_id, attempt_id) => rest.get(`/networks/${network_id}/sm/bypassActivationLockAttempts/${attempt_id}`)\n  };\n  dashboard.radio_settings = {\n    get: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}/wireless/radioSettings`),\n    update: (network_id, serial, params) => rest.put(`/networks/${network_id}/devices/${serial}/wireless/radioSettings`, params),\n    listRfProfiles: (network_id, params) => rest.get(`/networks/${network_id}/wireless/rfProfiles`, params)\n  };\n  dashboard.snmp_settings = {\n    get: network_id => rest.get(`/networks/${network_id}/snmpSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/snmpSettings`, params)\n  };\n  dashboard.ssids = {\n    list: network_id => rest.get(`/networks/${network_id}/ssids`),\n    get: (network_id, ssid) => rest.get(`/networks/${network_id}/ssids/${ssid}`),\n    update: (network_id, ssid, params) => rest.put(`/networks/${network_id}/ssids/${ssid}`, params)\n  };\n  dashboard.security_events = {\n    byOrganization: (organization_id, params) => rest.get(`/organizations/${organization_id}/securityEvents`, params),\n    byNetwork: (network_id, params) => rest.get(`/networks/${network_id}/securityEvents`, params)\n  };\n  dashboard.splash_page = {\n    loginAttempts: (network_id, params) => rest.get(`/networks/${network_id}/splashLoginAttempts`, params),\n    getSettings: (network_id, ssid) => rest.get(`/networks/${network_id}/ssids/${ssid}/splashSettings`),\n    updateSettings: (network_id, ssid, params) => rest.put(`/networks/${network_id}/ssids/${ssid}/splashSettings`, params)\n  };\n  dashboard.static_routes = {\n    list: network_id => rest.get(`/networks/${network_id}/staticRoutes`),\n    get: (network_id, sr_id) => rest.get(`/networks/${network_id}/staticRoutes/${sr_id}`),\n    update: (network_id, sr_id, params) => rest.put(`/networks/${network_id}/staticRoutes/${sr_id}`, params),\n    add: (network_id, params) => rest.post(`/networks/${network_id}/staticRoutes`, params),\n    delete: (network_id, sr_id) => rest.delete(`/networks/${network_id}/staticRoutes/${sr_id}`)\n  };\n  dashboard.switch_port_schedules = {\n    list: network_id => rest.get(`/networks/${network_id}/switch/portSchedules`)\n  };\n  dashboard.switch_ports = {\n    list: serial => rest.get(`/devices/${serial}/switchPorts`),\n    get: (serial, port_number) => rest.get(`/devices/${serial}/switchPorts/${port_number}`),\n    update: (serial, port_number, params) => rest.put(`/devices/${serial}/switchPorts/${port_number}`, params)\n  };\n  dashboard.switch_profiles = {\n    list: (organization_id, config_template_id) => rest.get(`/organizations/${organization_id}/configTemplates/${config_template_id}/switchProfiles`)\n  };\n  dashboard.switch_settings = {\n    get: network_id => rest.get(`/networks/${network_id}/switch/settings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/switch/settings`, params)\n  };\n  dashboard.switch_stacks = {\n    list: network_id => rest.get(`/networks/${network_id}/switchStacks`),\n    get: (network_id, switch_stack_id) => rest.get(`/networks/${network_id}/switchStacks/${switch_stack_id}`),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/switchStacks`, params),\n    add: (network_id, switch_stack_id, serial) => rest.post(`/networks/${network_id}/switchStacks/${switch_stack_id}/add`, ensureValueVerbose(serial, {\n      serial\n    }, {})),\n    remove: (network_id, switch_stack_id, serial) => rest.post(`/networks/${network_id}/switchStacks/${switch_stack_id}/remove`, ensureValueVerbose(serial, {\n      serial\n    }, {})),\n    delete: (network_id, switch_stack_id) => rest.delete(`/networks/${network_id}/switchStacks/${switch_stack_id}`)\n  };\n  dashboard.syslog_servers = {\n    list: network_id => rest.get(`/networks/${network_id}/syslogServers`),\n    update: (network_id, servers) => rest.put(`/networks/${network_id}/syslogServers`, ensureValueVerbose(servers, {\n      servers\n    }, {}))\n  };\n  dashboard.traffic_analysis_settings = {\n    get: network_id => rest.get(`/networks/${network_id}/trafficAnalysisSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/trafficAnalysisSettings`, params)\n  };\n  dashboard.traffic_shaping = {\n    network_settings: {\n      get: network_id => rest.get(`/networks/${network_id}/trafficShaping`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/trafficShaping`, params)\n    },\n    ssid_settings: {\n      get: (network_id, ssid) => rest.get(`/networks/${network_id}/ssids/${ssid}/trafficShaping`),\n      update: (network_id, ssid, params) => rest.put(`/networks/${network_id}/ssids/${ssid}/trafficShaping`, params)\n    },\n    dscpTaggingOptions: network_id => rest.get(`/networks/${network_id}/trafficShaping/dscpTaggingOptions`),\n    applicationCategories: network_id => rest.get(`/networks/${network_id}/trafficShaping/applicationCategories`)\n  };\n  dashboard.uplink_settings = {\n    get: network_id => rest.get(`/networks/${network_id}/uplinkSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/uplinkSettings`, params)\n  };\n  dashboard.vlans = {\n    list: network_id => rest.get(`/networks/${network_id}/vlans`),\n    get: (network_id, vlan_id) => rest.get(`/networks/${network_id}/vlans/${vlan_id}`),\n    update: (network_id, vlan_id, params) => rest.put(`/networks/${network_id}/vlans/${vlan_id}`, params),\n    add: (network_id, params) => rest.post(`/networks/${network_id}/vlans`, params),\n    delete: (network_id, vlan_id) => rest.delete(`/networks/${network_id}/vlans/${vlan_id}`),\n    isEnabled: network_id => rest.get(`/networks/${network_id}/vlansEnabledState`),\n    setEnabled: (network_id, enabled) => rest.put(`/networks/${network_id}/vlansEnabledState`, ensureValueVerbose(enabled, {\n      enabled\n    }, {}))\n  };\n  dashboard.webhook_logs = {\n    get: (organization_id, params) => rest.get(`/organizations/${organization_id}/webhookLogs`, params)\n  };\n  dashboard.wireless_health = {\n    connectivity_info: {\n      general: (network_id, params) => rest.get(`/networks/${network_id}/connectionStats`, params),\n      groupByNode: (network_id, params) => rest.get(`/networks/${network_id}/devices/connectionStats`, params),\n      forAP: (network_id, serial, params) => rest.get(`/networks/${network_id}/devices/${serial}/connectionStats`, params),\n      groupByClient: (network_id, params) => rest.get(`/networks/${network_id}/clients/connectionStats`, params),\n      forClient: (network_id, client_id, params) => rest.get(`/networks/${network_id}/clients/${client_id}/connectionStats`, params)\n    },\n    latency_info: {\n      general: (network_id, params) => rest.get(`/networks/${network_id}/latencyStats`, params),\n      groupByNode: (network_id, params) => rest.get(`/networks/${network_id}/devices/latencyStats`, params),\n      forAP: (network_id, serial, params) => rest.get(`/networks/${network_id}/devices/${serial}/latencyStats`, params),\n      groupByClient: (network_id, params) => rest.get(`/networks/${network_id}/clients/latencyStats`, params),\n      forClient: (network_id, client_id, params) => rest.get(`/networks/${network_id}/clients/${client_id}/latencyStats`, params)\n    },\n    failed_events: (network_id, params) => rest.get(`/networks/${network_id}/failedConnections`, params)\n  };\n  dashboard.custom = {\n    head: url => rest.head(url),\n    get: (url, parameters) => rest.get(url, parameters),\n    post: (url, parameters) => rest.post(url, parameters),\n    put: (url, parameters) => rest.put(url, parameters),\n    delete: url => rest.delete(url)\n  };\n  return dashboard;\n}\n\nmodule.exports = MerakiDashboard;","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/node_modules/node-meraki-dashboard/src/index.js"],"names":["axios","require","JSONbig","ERRORS","INVALID_API_KEY","ensureValueVerbose","testVal","truthyVal","falseyVal","MerakiDashboard","apiKey","trim","length","Error","dashboard","dataProcessor","response","data","errorProcessor","request","Promise","reject","rest","client","create","baseURL","headers","transformResponse","parse","get","url","params","then","catch","post","put","delete","api_usage","api_requests","organization_id","admins","list","update","admin_id","revoke","alert_settings","network_id","action_batches","action_batch_id","bluetooth_clients","client_mac","cameras","videoLink","serial","timestamp","snapshot","clients","timespan","client_id_or_mac_or_ip","provision","usageHistory","trafficHistory","events","latencyHistory","securityEvents","client_id","getPolicy","updatePolicy","getSplashAuth","updateSplashAuth","usedNetwork","config_templates","remove","template_id","content_filtering","categories","rules","devices","listByOrganization","listByNetwork","getUplinkInfo","claim","lldpCdpInfo","lossAndLatencyHistory","performanceScore","blinkLeds","reboot","firewalled_services","service","group_policies","group_policy_id","http_servers","server_id","test","testStatus","test_id","intrusion_settings","organization","mx_network","malware_settings","management_settings","meraki_auth","listUsers","getUser","user_id","mr_l3_firewall","getRules","ssid","updateRules","mv_sense","overview","zones","historicalRecords","zone_id","recentRecords","liveRecords","mx_nat_rules","one_to_one","one_to_many","mx_l3_firewall","mx_l7_app_categories","mx_l7_firewall","mx_vpn_firewall","mx_cellular_firewall","mx_port_forwarding","named_tag_scope","with_details","withDetails","named_tag_scope_id","netflow_settings","networks","bindToTemplate","unbindFromTemplate","getSiteToSiteVpn","updateSiteToSiteVpn","getTrafficData","listAccessPolicies","listAirMarshalScanResults","getBluetoothSettings","updateBluetoothSettings","combineNetworks","splitNetwork","openapi_spec","organizations","clone","claimDevice","getLicenseState","getInventory","getDeviceStatuses","getSnmpSettings","updateSnmpSettings","getUplinkLossLatency","getThirdPartyVpnPeers","updateThirdPartyVpnPeers","phone_announcements","add","name","group_id","phone_assignments","assign","phone_callgroups","call_group_id","phone_comference_rooms","room_id","phone_contacts","contact_id","phone_numbers","listAll","listAvailable","pii","getDeviceId","listSMOwners","listRequests","getRequest","request_id","submitRequest","deleteRequest","saml_roles","role_id","sm","cisco_clarity","createProfile","updateProfile","profile_id","addPayload","getPayloadDetails","deletePayload","cisco_umbrella","cisco_polaris","createApp","updateApp","app_id","getAppDetails","bundle_id","bundleId","deleteApp","device","networkAdapters","device_id","wlanLists","securityCenters","restrictions","certs","cellularUsage","performanceHistory","desktopLogs","commandLogs","connectivityHistory","unenroll","listDevices","listOwners","listProfilesByUser","listProfilesByDevice","listSoftwareByUser","listSoftwareByDevice","editTags","editFields","lockDevices","wipeDevice","forceCheckInDevices","moveDevices","listProfiles","bypassLockAttempt","ids","bypassLockAttemptStatus","attempt_id","radio_settings","listRfProfiles","snmp_settings","ssids","security_events","byOrganization","byNetwork","splash_page","loginAttempts","getSettings","updateSettings","static_routes","sr_id","switch_port_schedules","switch_ports","port_number","switch_profiles","config_template_id","switch_settings","switch_stacks","switch_stack_id","syslog_servers","servers","traffic_analysis_settings","traffic_shaping","network_settings","ssid_settings","dscpTaggingOptions","applicationCategories","uplink_settings","vlans","vlan_id","isEnabled","setEnabled","enabled","webhook_logs","wireless_health","connectivity_info","general","groupByNode","forAP","groupByClient","forClient","latency_info","failed_events","custom","head","parameters","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst axios = require('axios');\nconst JSONbig = require('json-bigint');\nconst ERRORS = { INVALID_API_KEY: 'Invalid API Key specified!' };\n\nconst ensureValueVerbose = (testVal, truthyVal, falseyVal) => typeof testVal !== 'undefined' ? truthyVal : falseyVal;\n\nfunction MerakiDashboard(apiKey) {\n  if (typeof apiKey !== 'string' || apiKey.trim().length === 0)\n    throw new Error(ERRORS.INVALID_API_KEY);\n\n  apiKey = apiKey.trim();\n\n  const dashboard = {};\n\n  const dataProcessor = response => response.data;\n  const errorProcessor = response => {\n    delete response.response.request;\n    return Promise.reject(response.response);\n  };\n\n  const rest = {\n    client: axios.create({\n      baseURL: 'https://api.meraki.com/api/v0/',\n      headers: {\n        'X-Cisco-Meraki-API-Key': apiKey,\n        'Content-Type': 'application/json; charset=utf-8',\n        'Accept': 'application/json'\n      },\n      transformResponse: [ JSONbig.parse ]\n    }),\n    get: function(url, params) {\n      return this.client.get(url, { params })\n        .then(dataProcessor)\n        .catch(errorProcessor);\n    },\n    post: function(url, params) {\n      return this.client.post(url, params)\n        .then(dataProcessor)\n        .catch(errorProcessor);\n    },\n    put: function(url, params) {\n      return this.client.put(url, params)\n        .then(dataProcessor)\n        .catch(errorProcessor);\n    },\n    delete: function(url) {\n      return this.client.delete(url)\n        .then(dataProcessor)\n        .catch(errorProcessor);\n    }\n  };\n\n  dashboard.api_usage = {\n    api_requests: (organization_id, params) => rest.get(`/organizations/${organization_id}/apiRequests`, params)\n  };\n\n  dashboard.admins = {\n    list: (organization_id) => rest.get(`/organizations/${organization_id}/admins`),\n    create: (organization_id, params) => rest.post(`/organizations/${organization_id}/admins`, params),\n    update: (organization_id, admin_id, params) => rest.put(`/organizations/${organization_id}/admins/${admin_id}`, params),\n    revoke: (organization_id, admin_id) => rest.delete(`/organizations/${organization_id}/admins/${admin_id}`)\n  };\n\n  dashboard.alert_settings = {\n    get: (network_id) => rest.get(`/networks/${network_id}/alertSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/alertSettings`, params)\n  };\n\n  dashboard.action_batches = {\n    list: (organization_id) => rest.get(`/organizations/${organization_id}/actionBatches`),\n    get: (organization_id, action_batch_id) => rest.get(`/organizations/${organization_id}/actionBatches/${action_batch_id}`),\n    create: (organization_id, params) => rest.post(`/organizations/${organization_id}/actionBatches`, params),\n    update: (organization_id, action_batch_id, params) => rest.put(`/organizations/${organization_id}/actionBatches/${action_batch_id}`, params),\n    delete: (organization_id, action_batch_id) => rest.delete(`/organizations/${organization_id}/actionBatches/${action_batch_id}`)\n  };\n\n  dashboard.bluetooth_clients = {\n    list: (network_id, params) => rest.get(`/networks/${network_id}/bluetoothClients`, params),\n    get: (network_id, client_mac, params) => rest.get(`/networks/${network_id}/bluetoothClients/${client_mac}`, params)\n  };\n\n  dashboard.cameras = {\n    videoLink: (network_id, serial, timestamp) => rest.get(`/networks/${network_id}/cameras/${serial}/videoLink`, ensureValueVerbose(timestamp, { timestamp }, {})),\n    snapshot: (network_id, serial, timestamp) => rest.post(`/networks/${network_id}/cameras/${serial}/snapshot`, ensureValueVerbose(timestamp, { timestamp }, {}))\n  };\n\n  dashboard.clients = {\n    list: (serial, timespan) => rest.get(`/devices/${serial}/clients`, ensureValueVerbose(timespan, { timespan }, {})),\n    get: (network_id, client_id_or_mac_or_ip) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}`),\n    provision: (network_id, params) => rest.post(`/networks/${network_id}/clients/provision`, params),\n    usageHistory: (network_id, client_id_or_mac_or_ip) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}/usageHistory`),\n    trafficHistory: (network_id, client_id_or_mac_or_ip, params) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}/trafficHistory`, params),\n    events: (network_id, client_id_or_mac_or_ip, params) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}/events`, params),\n    latencyHistory: (network_id, client_id_or_mac_or_ip, params) => rest.get(`/networks/${network_id}/clients/${client_id_or_mac_or_ip}/latencyHistory`, params),\n    securityEvents: (network_id, client_id, params) => rest.get(`/networks/${network_id}/clients/${client_id}/securityEvents`, params),\n    getPolicy: (network_id, client_mac, timespan) => rest.get(`/networks/${network_id}/clients/${client_mac}/policy`, ensureValueVerbose(timespan, { timespan }, {})),\n    updatePolicy: (network_id, client_mac, params) => rest.put(`/networks/${network_id}/clients/${client_mac}/policy`, params),\n    getSplashAuth: (network_id, client_mac) => rest.get(`/networks/${network_id}/clients/${client_mac}/splashAuthorizationStatus`),\n    updateSplashAuth: (network_id, client_mac, params) => rest.put(`/networks/${network_id}/clients/${client_mac}/splashAuthorizationStatus`, params),\n    usedNetwork: (network_id, params) => rest.get(`/networks/${network_id}/clients`, params)\n  };\n\n  dashboard.config_templates = {\n    list: (organization_id) => rest.get(`/organizations/${organization_id}/configTemplates`),\n    remove: (organization_id, template_id) => rest.delete(`/organizations/${organization_id}/configTemplates/${template_id}`)\n  };\n\n  dashboard.content_filtering = {\n    categories: {\n      get: (network_id) => rest.get(`/networks/${network_id}/contentFiltering/categories`)\n    },\n    rules: {\n      get: (network_id) => rest.get(`/networks/${network_id}/contentFiltering`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/contentFiltering`, params)\n    }\n  };\n\n  dashboard.devices = {\n    listByOrganization: (organization_id, params) => rest.get(`/organizations/${organization_id}/devices`, params),\n    listByNetwork: (network_id) => rest.get(`/networks/${network_id}/devices`),\n    get: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}`),\n    getUplinkInfo: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}/uplink`),\n    update: (network_id, serial, params) => rest.put(`/networks/${network_id}/devices/${serial}`, params),\n    claim: (network_id, params) => rest.post(`/networks/${network_id}/devices/claim`, params),\n    remove: (network_id, serial) => rest.post(`/networks/${network_id}/devices/${serial}/remove`),\n    lldpCdpInfo: (network_id, serial, timespan) => rest.get(`/networks/${network_id}/devices/${serial}/lldp_cdp`, ensureValueVerbose(timespan, { timespan }, {})),\n    lossAndLatencyHistory: (network_id, serial, params) => rest.get(`/networks/${network_id}/devices/${serial}/lossAndLatencyHistory`, params),\n    performanceScore: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}/performance`),\n    blinkLeds: (network_id, serial, params) => rest.post(`/networks/${network_id}/devices/${serial}/blinkLeds`, params),\n    reboot: (network_id, serial) => rest.post(`/networks/${network_id}/devices/${serial}/reboot`)\n  };\n\n  dashboard.firewalled_services = {\n    list: (network_id) => rest.get(`/networks/${network_id}/firewalledServices`),\n    get: (network_id, service) => rest.get(`/networks/${network_id}/firewalledServices/${service}`),\n    update: (network_id, service, params) => rest.put(`/networks/${network_id}/firewalledServices/${service}`, params)\n  };\n\n  dashboard.group_policies = {\n    list: (network_id) => rest.get(`/networks/${network_id}/groupPolicies`),\n    get: (network_id, group_policy_id) => rest.get(`/networks/${network_id}/groupPolicies/${group_policy_id}`),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/groupPolicies`, params),\n    update: (network_id, group_policy_id, params) => rest.put(`/networks/${network_id}/groupPolicies/${group_policy_id}`, params),\n    delete: (network_id, group_policy_id) => rest.delete(`/networks/${network_id}/groupPolicies/${group_policy_id}`),\n  };\n\n  dashboard.http_servers = {\n    list: (network_id) => rest.get(`/networks/${network_id}/httpServers`),\n    get: (network_id, server_id) => rest.get(`/networks/${network_id}/httpServers/${server_id}`),\n    update: (network_id, server_id, params) => rest.put(`/networks/${network_id}/httpServers/${server_id}`, params),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/httpServers`, params),\n    delete: (network_id, server_id) => rest.delete(`/networks/${network_id}/httpServers/${server_id}`),\n    test: (network_id, url) => rest.post(`/networks/${network_id}/httpServers/webhookTests`, ensureValueVerbose(url, { url }, {})),\n    testStatus: (network_id, test_id) => rest.get(`/networks/${network_id}/httpServers/webhookTests/${test_id}`)\n  };\n\n  dashboard.intrusion_settings = {\n    organization: {\n      get: (organization_id) => rest.get(`/organizations/${organization_id}/security/intrusionSettings`),\n      update: (organization_id, params) => rest.put(`/organizations/${organization_id}/security/intrusionSettings`, params),\n    },\n    mx_network: {\n      get: (network_id) => rest.get(`/networks/${network_id}/security/intrusionSettings`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/security/intrusionSettings`, params),\n    },\n  };\n\n  dashboard.malware_settings = {\n    get: (network_id) => rest.get(`/networks/${network_id}/security/malwareSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/security/malwareSettings`, params)\n  };\n\n  dashboard.management_settings = {\n    get: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}/managementInterfaceSettings`),\n    update: (network_id, serial, params) => rest.put(`/networks/${network_id}/devices/${serial}/managementInterfaceSettings`, params)\n  };\n\n  dashboard.meraki_auth = {\n    listUsers: (network_id) => rest.get(`/networks/${network_id}/merakiAuthUsers`),\n    getUser: (network_id, user_id) => rest.get(`/networks/${network_id}/merakiAuthUsers/${user_id}`)\n  };\n\n  dashboard.mr_l3_firewall = {\n    getRules: (network_id, ssid) => rest.get(`/networks/${network_id}/ssids/${ssid}/l3FirewallRules`),\n    updateRules: (network_id, ssid, params) => rest.put(`/networks/${network_id}/ssids/${ssid}/l3FirewallRules`, params)\n  };\n\n  dashboard.mv_sense = {\n    overview: (serial) => rest.get(`/devices/${serial}/camera/analytics/overview`),\n    zones: (serial) => rest.get(`/devices/${serial}/camera/analytics/zones`),\n    historicalRecords: (serial, zone_id, params) => rest.get(`/devices/${serial}/camera/analytics/zones/${zone_id}/history`, params),\n    recentRecords: (serial) => rest.get(`/devices/${serial}/camera/analytics/recent`),\n    liveRecords: (serial) => rest.get(`/devices/${serial}/camera/analytics/live`)\n  };\n\n  dashboard.mx_nat_rules = {\n    one_to_one: {\n      get: (network_id) => rest.get(`/networks/${network_id}/oneToOneNatRules`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/oneToOneNatRules`, params),\n    },\n    one_to_many: {\n      get: (network_id) => rest.get(`/networks/${network_id}/oneToManyNatRules`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/oneToManyNatRules`, params),\n    },\n  };\n\n  dashboard.mx_l3_firewall = {\n    getRules: (network_id) => rest.get(`/networks/${network_id}/l3FirewallRules`),\n    updateRules: (network_id, params) => rest.put(`/networks/${network_id}/l3FirewallRules`, params)\n  };\n\n  dashboard.mx_l7_app_categories = {\n    list: (network_id) => rest.get(`/networks/${network_id}/l7FirewallRules/applicationCategories`)\n  };\n\n  dashboard.mx_l7_firewall = {\n    getRules: (network_id) => rest.get(`/networks/${network_id}/l7FirewallRules`),\n    updateRules: (network_id, params) => rest.put(`/networks/${network_id}/l7FirewallRules`, params)\n  };\n\n  dashboard.mx_vpn_firewall = {\n    getRules: (organization_id) => rest.get(`/organizations/${organization_id}/vpnFirewallRules`),\n    updateRules: (organization_id, params) => rest.put(`/organizations/${organization_id}/vpnFirewallRules`, params)\n  };\n\n  dashboard.mx_cellular_firewall = {\n    getRules: (network_id) => rest.get(`/networks/${network_id}/cellularFirewallRules`),\n    updateRules: (network_id, params) => rest.put(`/networks/${network_id}/cellularFirewallRules`, params),\n  };\n\n  dashboard.mx_port_forwarding = {\n    getRules: (network_id) => rest.get(`/networks/${network_id}/portForwardingRules`),\n    updateRules: (network_id, params) => rest.put(`/networks/${network_id}/portForwardingRules`, params)\n  };\n\n  dashboard.named_tag_scope = {\n    list: (network_id, with_details) => rest.get(`/networks/${network_id}/sm/targetGroups`, ensureValueVerbose(with_details, { withDetails: with_details }, {})),\n    get: (network_id, named_tag_scope_id, with_details) => rest.get(`/networks/${network_id}/sm/targetGroups/${named_tag_scope_id}`, ensureValueVerbose(with_details, { withDetails: with_details }, {})),\n    update: (network_id, named_tag_scope_id, params) => rest.put(`/networks/${network_id}/sm/targetGroups/${named_tag_scope_id}`, params),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/sm/targetGroups`, params),\n    delete: (network_id, named_tag_scope_id) => rest.delete(`/networks/${network_id}/sm/targetGroups/${named_tag_scope_id}`)\n  };\n\n  dashboard.netflow_settings = {\n    get: (network_id) => rest.get(`/networks/${network_id}/netflowSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/netflowSettings`, params)\n  };\n\n  dashboard.networks = {\n    list: (organization_id) => rest.get(`/organizations/${organization_id}/networks`),\n    get: (network_id) => rest.get(`/networks/${network_id}`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}`, params),\n    create: (organization_id, params) => rest.post(`/organizations/${organization_id}/networks`, params),\n    delete: (network_id) => rest.delete(`/networks/${network_id}`),\n    bindToTemplate: (network_id, params) => rest.post(`/networks/${network_id}/bind`, params),\n    unbindFromTemplate: (network_id) => rest.post(`/networks/${network_id}/unbind`),\n    getSiteToSiteVpn: (network_id) => rest.get(`/networks/${network_id}/siteToSiteVpn`),\n    updateSiteToSiteVpn: (network_id, params) => rest.put(`/networks/${network_id}/siteToSiteVpn`, params),\n    getTrafficData: (network_id, params) => rest.get(`/networks/${network_id}/traffic`, params),\n    listAccessPolicies: (network_id) => rest.get(`/networks/${network_id}/accessPolicies`),\n    listAirMarshalScanResults: (network_id, timespan) => rest.get(`/networks/${network_id}/airMarshal`, ensureValueVerbose(timespan, { timespan }, {})),\n    getBluetoothSettings: (network_id) => rest.get(`/networks/${network_id}/bluetoothSettings`),\n    updateBluetoothSettings: (network_id, params) => rest.put(`/networks/${network_id}/bluetoothSettings`, params),\n    combineNetworks: (organization_id, params) => rest.post(`/organizations/${organization_id}/networks/combine`, params),\n    splitNetwork: (network_id) => rest.post(`/networks/${network_id}/split`)\n  };\n\n  dashboard.openapi_spec = {\n    get: (organization_id) => rest.get(`/organizations/${organization_id}/openapiSpec`)\n  };\n\n  dashboard.organizations = {\n    list: () => rest.get(`/organizations`),\n    get: (organization_id) => rest.get(`/organizations/${organization_id}`),\n    create: (params) => rest.post(`/organizations`, params),\n    update: (organization_id, params) => rest.put(`/organizations/${organization_id}`, params),\n    delete: (organization_id) => rest.delete(`/organizations/${organization_id}`),\n    clone: (organization_id, params) => rest.post(`/organizations/${organization_id}/clone`, params),\n    claimDevice: (organization_id, params) => rest.post(`/organizations/${organization_id}/claim`, params),\n    getLicenseState: (organization_id) => rest.get(`/organizations/${organization_id}/licenseState`),\n    getInventory: (organization_id) => rest.get(`/organizations/${organization_id}/inventory`),\n    getDeviceStatuses: (organization_id) => rest.get(`/organizations/${organization_id}/deviceStatuses`),\n    getSnmpSettings: (organization_id) => rest.get(`/organizations/${organization_id}/snmp`),\n    updateSnmpSettings: (organization_id, params) => rest.put(`/organizations/${organization_id}/snmp`, params),\n    getUplinkLossLatency: (organization_id, params) => rest.get(`/organizations/${organization_id}/uplinksLossAndLatency`, params),\n    getThirdPartyVpnPeers: (organization_id) => rest.get(`/organizations/${organization_id}/thirdPartyVPNPeers`),\n    updateThirdPartyVpnPeers: (organization_id, params) => rest.put(`/organizations/${organization_id}/thirdPartyVPNPeers`, params)\n  };\n\n  dashboard.phone_announcements = {\n    list: (network_id) => rest.get(`/networks/${network_id}/phoneAnnouncements`),\n    add: (network_id, name) => rest.post(`/networks/${network_id}/phoneAnnouncements`, ensureValueVerbose(name, { name }, {})),\n    delete: (network_id, group_id) => rest.delete(`/networks/${network_id}/phoneAnnouncements/${group_id}`)\n  };\n\n  dashboard.phone_assignments = {\n    list: (network_id) => rest.get(`/networks/${network_id}/phoneAssignments`),\n    get: (network_id, serial) => rest.get(`/networks/${network_id}/phoneAssignments/${serial}`),\n    assign: (network_id, serial, params) => rest.put(`/networks/${network_id}/phoneAssignments/${serial}`, params),\n    delete: (network_id, serial) => rest.delete(`/networks/${network_id}/phoneAssignments/${serial}`),\n  };\n\n  dashboard.phone_callgroups = {\n    list: (network_id) => rest.get(`/networks/${network_id}/phoneCallgroups`),\n    get: (network_id, call_group_id) => rest.get(`/networks/${network_id}/phoneCallgroups/${call_group_id}`),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/phoneCallgroups`, params),\n    update: (network_id, call_group_id, params) => rest.put(`/networks/${network_id}/phoneCallgroups/${call_group_id}`, params),\n    delete: (network_id, call_group_id) => rest.delete(`/networks/${network_id}/phoneCallgroups/${call_group_id}`)\n  };\n\n  dashboard.phone_comference_rooms = {\n    list: (network_id) => rest.get(`/networks/${network_id}/phoneConferenceRooms`),\n    get: (network_id, room_id) => rest.get(`/networks/${network_id}/phoneConferenceRooms/${room_id}`),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/phoneConferenceRooms`, params),\n    update: (network_id, room_id, params) => rest.put(`/networks/${network_id}/phoneConferenceRooms/${room_id}`, params),\n    delete: (network_id, room_id) => rest.delete(`/networks/${network_id}/phoneConferenceRooms/${room_id}`)\n  };\n\n  dashboard.phone_contacts = {\n    list: (network_id) => rest.get(`/networks/${network_id}/phoneContacts`),\n    add: (network_id, name) => rest.post(`/networks/${network_id}/phoneContacts`, ensureValueVerbose(name, { name }, {})),\n    update: (network_id, contact_id, name) => rest.put(`/networks/${network_id}/phoneContacts/${contact_id}`, ensureValueVerbose(name, { name }, {})),\n    delete: (network_id, contact_id) => rest.delete(`/networks/${network_id}/phoneContacts/${contact_id}`)\n  };\n\n  dashboard.phone_numbers = {\n    listAll: (network_id) => rest.get(`/networks/${network_id}/phoneNumbers`),\n    listAvailable: (network_id) => rest.get(`/networks/${network_id}/phoneNumbers/available`)\n  };\n\n  dashboard.pii = {\n    organizations: {\n      list: (organization_id, params) => rest.get(`/organizations/${organization_id}/pii/piiKeys`, params),\n      getDeviceId: (organization_id, params) => rest.get(`/organizations/${organization_id}/pii/smDevicesForKey`, params),\n      listSMOwners: (organization_id, params) => rest.get(`/organizations/${organization_id}/pii/smOwnersForKey`, params),\n      listRequests: (organization_id) => rest.get(`/organizations/${organization_id}/pii/requests`),\n      getRequest: (organization_id, request_id) => rest.get(`/organizations/${organization_id}/pii/requests/${request_id}`),\n      submitRequest: (organization_id, params) => rest.post(`/organizations/${organization_id}/pii/requests`, params),\n      deleteRequest: (organization_id, request_id) => rest.delete(`/organizations/${organization_id}/pii/requests/${request_id}`),\n    },\n    networks: {\n      list: (network_id, params) => rest.get(`/networks/${network_id}/pii/piiKeys`, params),\n      getDeviceId: (network_id, params) => rest.get(`/networks/${network_id}/pii/smDevicesForKey`, params),\n      listSMOwners: (network_id, params) => rest.get(`/networks/${network_id}/pii/smOwnersForKey`, params),\n      listRequests: (network_id) => rest.get(`/networks/${network_id}/pii/requests`),\n      getRequest: (network_id, request_id) => rest.get(`/networks/${network_id}/pii/requests/${request_id}`),\n      submitRequest: (network_id, params) => rest.post(`/networks/${network_id}/pii/requests`, params),\n      deleteRequest: (network_id, request_id) => rest.delete(`/networks/${network_id}/pii/requests/${request_id}`),\n    }\n  };\n\n  dashboard.saml_roles = {\n    list: (organization_id) => rest.get(`/organizations/${organization_id}/samlRoles`),\n    get: (organization_id, role_id) => rest.get(`/organizations/${organization_id}/samlRoles/${role_id}`),\n    update: (organization_id, role_id, params) => rest.put(`/organizations/${organization_id}/samlRoles/${role_id}`, params),\n    create: (organization_id, params) => rest.post(`/organizations/${organization_id}/samlRoles`, params),\n    delete: (organization_id, role_id) => rest.delete(`/organizations/${organization_id}/samlRoles/${role_id}`),\n  };\n\n  dashboard.sm = {\n    cisco_clarity: {\n      createProfile: (network_id, params) => rest.post(`/networks/${network_id}/sm/profile/clarity`, params),\n      updateProfile: (network_id, profile_id, params) => rest.put(`/networks/${network_id}/sm/profile/clarity/${profile_id}`, params),\n      addPayload: (network_id, profile_id, params) => rest.post(`/networks/${network_id}/sm/profile/clarity/${profile_id}`, params),\n      getPayloadDetails: (network_id, profile_id) => rest.get(`/networks/${network_id}/sm/profile/clarity/${profile_id}`),\n      deletePayload: (network_id, profile_id) => rest.delete(`/networks/${network_id}/sm/profile/clarity/${profile_id}`)\n    },\n    cisco_umbrella: {\n      createProfile: (network_id, params) => rest.post(`/networks/${network_id}/sm/profile/umbrella`, params),\n      updateProfile: (network_id, profile_id, params) => rest.put(`/networks/${network_id}/sm/profile/umbrella/${profile_id}`, params),\n      addPayload: (network_id, profile_id, params) => rest.post(`/networks/${network_id}/sm/profile/umbrella/${profile_id}`, params),\n      getPayloadDetails: (network_id, profile_id) => rest.get(`/networks/${network_id}/sm/profile/umbrella/${profile_id}`),\n      deletePayload: (network_id, profile_id) => rest.delete(`/networks/${network_id}/sm/profile/umbrella/${profile_id}`)\n    },\n    cisco_polaris: {\n      createApp: (network_id, params) => rest.post(`/networks/${network_id}/sm/app/polaris`, params),\n      updateApp: (network_id, app_id, params) => rest.put(`/networks/${network_id}/sm/app/polaris/${app_id}`, params),\n      getAppDetails: (network_id, bundle_id) => rest.get(`/networks/${network_id}/sm/app/polaris`, ensureValueVerbose(bundle_id, { bundleId: bundle_id }, {})),\n      deleteApp: (network_id, app_id) => rest.delete(`/networks/${network_id}/sm/app/polaris/${app_id}`)\n    },\n    device: {\n      networkAdapters: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/networkAdapters`),\n      wlanLists: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/wlanLists`),\n      securityCenters: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/securityCenters`),\n      restrictions: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/restrictions`),\n      certs: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/certs`),\n      cellularUsage: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/cellularUsageHistory`),\n      performanceHistory: (network_id, device_id, params) => rest.get(`/networks/${network_id}/sm/${device_id}/performanceHistory`, params),\n      desktopLogs: (network_id, device_id, params) => rest.get(`/networks/${network_id}/sm/${device_id}/desktopLogs`, params),\n      commandLogs: (network_id, device_id, params) => rest.get(`/networks/${network_id}/sm/${device_id}/deviceCommandLogs`, params),\n      connectivityHistory: (network_id, device_id, params) => rest.get(`/networks/${network_id}/sm/${device_id}/connectivity`, params),\n      unenroll: (network_id, device_id) => rest.post(`/networks/${network_id}/sm/devices/${device_id}/unenroll`)\n    },\n    listDevices: (network_id) => rest.get(`/networks/${network_id}/sm/devices`),\n    listOwners: (network_id, params) => rest.get(`/networks/${network_id}/sm/users`, params),\n    listProfilesByUser: (network_id, user_id) => rest.get(`/networks/${network_id}/sm/user/${user_id}/deviceProfiles`),\n    listProfilesByDevice: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/deviceProfiles`),\n    listSoftwareByUser: (network_id, user_id) => rest.get(`/networks/${network_id}/sm/user/${user_id}/softwares`),\n    listSoftwareByDevice: (network_id, device_id) => rest.get(`/networks/${network_id}/sm/${device_id}/softwares`),\n    editTags: (network_id, params) => rest.put(`/networks/${network_id}/sm/devices/tags`, params),\n    editFields: (network_id, params) => rest.put(`/networks/${network_id}/sm/device/fields`, params),\n    lockDevices: (network_id, params) => rest.put(`/networks/${network_id}/sm/devices/lock`, params),\n    wipeDevice: (network_id, params) => rest.put(`/networks/${network_id}/sm/device/wipe`, params),\n    forceCheckInDevices: (network_id, params) => rest.put(`/networks/${network_id}/sm/devices/checkin`, params),\n    moveDevices: (network_id, params) => rest.put(`/networks/${network_id}/sm/devices/move`, params),\n    listProfiles: (network_id) => rest.get(`/networks/${network_id}/sm/profiles`),\n    bypassLockAttempt: (network_id, ids) => rest.post(`/networks/${network_id}/sm/bypassActivationLockAttempts`, ensureValueVerbose(ids, { ids }, {})),\n    bypassLockAttemptStatus: (network_id, attempt_id) => rest.get(`/networks/${network_id}/sm/bypassActivationLockAttempts/${attempt_id}`)\n  };\n\n  dashboard.radio_settings = {\n    get: (network_id, serial) => rest.get(`/networks/${network_id}/devices/${serial}/wireless/radioSettings`),\n    update: (network_id, serial, params) => rest.put(`/networks/${network_id}/devices/${serial}/wireless/radioSettings`, params),\n    listRfProfiles: (network_id, params) => rest.get(`/networks/${network_id}/wireless/rfProfiles`, params)\n  };\n\n  dashboard.snmp_settings = {\n    get: (network_id) => rest.get(`/networks/${network_id}/snmpSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/snmpSettings`, params)\n  };\n\n  dashboard.ssids = {\n    list: (network_id) => rest.get(`/networks/${network_id}/ssids`),\n    get: (network_id, ssid) => rest.get(`/networks/${network_id}/ssids/${ssid}`),\n    update: (network_id, ssid, params) => rest.put(`/networks/${network_id}/ssids/${ssid}`, params)\n  };\n\n  dashboard.security_events = {\n    byOrganization: (organization_id, params) => rest.get(`/organizations/${organization_id}/securityEvents`, params),\n    byNetwork: (network_id, params) => rest.get(`/networks/${network_id}/securityEvents`, params)\n  };\n\n  dashboard.splash_page = {\n    loginAttempts: (network_id, params) => rest.get(`/networks/${network_id}/splashLoginAttempts`, params),\n    getSettings: (network_id, ssid) => rest.get(`/networks/${network_id}/ssids/${ssid}/splashSettings`),\n    updateSettings: (network_id, ssid, params) => rest.put(`/networks/${network_id}/ssids/${ssid}/splashSettings`, params)\n  };\n\n  dashboard.static_routes = {\n    list: (network_id) => rest.get(`/networks/${network_id}/staticRoutes`),\n    get: (network_id, sr_id) => rest.get(`/networks/${network_id}/staticRoutes/${sr_id}`),\n    update: (network_id, sr_id, params) => rest.put(`/networks/${network_id}/staticRoutes/${sr_id}`, params),\n    add: (network_id, params) => rest.post(`/networks/${network_id}/staticRoutes`, params),\n    delete: (network_id, sr_id) => rest.delete(`/networks/${network_id}/staticRoutes/${sr_id}`)\n  };\n\n  dashboard.switch_port_schedules = {\n    list: (network_id) => rest.get(`/networks/${network_id}/switch/portSchedules`)\n  };\n\n  dashboard.switch_ports = {\n    list: (serial) => rest.get(`/devices/${serial}/switchPorts`),\n    get: (serial, port_number) => rest.get(`/devices/${serial}/switchPorts/${port_number}`),\n    update: (serial, port_number, params) => rest.put(`/devices/${serial}/switchPorts/${port_number}`, params)\n  };\n\n  dashboard.switch_profiles = {\n    list: (organization_id, config_template_id) => rest.get(`/organizations/${organization_id}/configTemplates/${config_template_id}/switchProfiles`)\n  };\n\n  dashboard.switch_settings = {\n    get: (network_id) => rest.get(`/networks/${network_id}/switch/settings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/switch/settings`, params)\n  };\n\n  dashboard.switch_stacks = {\n    list: (network_id) => rest.get(`/networks/${network_id}/switchStacks`),\n    get: (network_id, switch_stack_id) => rest.get(`/networks/${network_id}/switchStacks/${switch_stack_id}`),\n    create: (network_id, params) => rest.post(`/networks/${network_id}/switchStacks`, params),\n    add: (network_id, switch_stack_id, serial) => rest.post(`/networks/${network_id}/switchStacks/${switch_stack_id}/add`, ensureValueVerbose(serial, { serial }, {})),\n    remove: (network_id, switch_stack_id, serial) => rest.post(`/networks/${network_id}/switchStacks/${switch_stack_id}/remove`, ensureValueVerbose(serial, { serial }, {})),\n    delete: (network_id, switch_stack_id) => rest.delete(`/networks/${network_id}/switchStacks/${switch_stack_id}`)\n  };\n\n  dashboard.syslog_servers = {\n    list: (network_id) => rest.get(`/networks/${network_id}/syslogServers`),\n    update: (network_id, servers) => rest.put(`/networks/${network_id}/syslogServers`, ensureValueVerbose(servers, { servers }, {}))\n  };\n\n  dashboard.traffic_analysis_settings = {\n    get: (network_id) => rest.get(`/networks/${network_id}/trafficAnalysisSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/trafficAnalysisSettings`, params)\n  };\n\n  dashboard.traffic_shaping = {\n    network_settings: {\n      get: (network_id) => rest.get(`/networks/${network_id}/trafficShaping`),\n      update: (network_id, params) => rest.put(`/networks/${network_id}/trafficShaping`, params),\n    },\n    ssid_settings: {\n      get: (network_id, ssid) => rest.get(`/networks/${network_id}/ssids/${ssid}/trafficShaping`),\n      update: (network_id, ssid, params) => rest.put(`/networks/${network_id}/ssids/${ssid}/trafficShaping`, params),\n    },\n    dscpTaggingOptions: (network_id) => rest.get(`/networks/${network_id}/trafficShaping/dscpTaggingOptions`),\n    applicationCategories: (network_id) => rest.get(`/networks/${network_id}/trafficShaping/applicationCategories`)\n  };\n\n  dashboard.uplink_settings = {\n    get: (network_id) => rest.get(`/networks/${network_id}/uplinkSettings`),\n    update: (network_id, params) => rest.put(`/networks/${network_id}/uplinkSettings`, params)\n  };\n\n  dashboard.vlans = {\n    list: (network_id) => rest.get(`/networks/${network_id}/vlans`),\n    get: (network_id, vlan_id) => rest.get(`/networks/${network_id}/vlans/${vlan_id}`),\n    update: (network_id, vlan_id, params) => rest.put(`/networks/${network_id}/vlans/${vlan_id}`, params),\n    add: (network_id, params) => rest.post(`/networks/${network_id}/vlans`, params),\n    delete: (network_id, vlan_id) => rest.delete(`/networks/${network_id}/vlans/${vlan_id}`),\n    isEnabled: (network_id) => rest.get(`/networks/${network_id}/vlansEnabledState`),\n    setEnabled: (network_id, enabled) => rest.put(`/networks/${network_id}/vlansEnabledState`, ensureValueVerbose(enabled, { enabled }, {})),\n  };\n\n  dashboard.webhook_logs = {\n    get: (organization_id, params) => rest.get(`/organizations/${organization_id}/webhookLogs`, params)\n  };\n\n  dashboard.wireless_health = {\n    connectivity_info: {\n      general: (network_id, params) => rest.get(`/networks/${network_id}/connectionStats`, params),\n      groupByNode: (network_id, params) => rest.get(`/networks/${network_id}/devices/connectionStats`, params),\n      forAP: (network_id, serial, params) => rest.get(`/networks/${network_id}/devices/${serial}/connectionStats`, params),\n      groupByClient: (network_id, params) => rest.get(`/networks/${network_id}/clients/connectionStats`, params),\n      forClient: (network_id, client_id, params) => rest.get(`/networks/${network_id}/clients/${client_id}/connectionStats`, params)\n    },\n    latency_info: {\n      general: (network_id, params) => rest.get(`/networks/${network_id}/latencyStats`, params),\n      groupByNode: (network_id, params) => rest.get(`/networks/${network_id}/devices/latencyStats`, params),\n      forAP: (network_id, serial, params) => rest.get(`/networks/${network_id}/devices/${serial}/latencyStats`, params),\n      groupByClient: (network_id, params) => rest.get(`/networks/${network_id}/clients/latencyStats`, params),\n      forClient: (network_id, client_id, params) => rest.get(`/networks/${network_id}/clients/${client_id}/latencyStats`, params)\n    },\n    failed_events: (network_id, params) => rest.get(`/networks/${network_id}/failedConnections`, params)\n  };\n\n  dashboard.custom = {\n    head: url => rest.head(url),\n    get: (url, parameters) => rest.get(url, parameters),\n    post: (url, parameters) => rest.post(url, parameters),\n    put: (url, parameters) => rest.put(url, parameters),\n    delete: url => rest.delete(url)\n  };\n\n  return dashboard;\n}\n\nmodule.exports = MerakiDashboard;"]},"metadata":{},"sourceType":"script"}