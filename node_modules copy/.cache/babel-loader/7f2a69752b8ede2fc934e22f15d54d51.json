{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Template from \"./components/Template\";\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"12345\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  console.log(\"App -> allVlanList\", allVlanList);\n  const [timeZone, settimeZone] = useState(0);\n  const [Name, setName] = useState(\"\");\n  const [loginEmail, setloginEmail] = useState(\"\");\n  const [inputKey, setinputKey] = useState();\n  const [inputConfKey, setinputConfKey] = useState();\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(false);\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [mapRows, setmapRows] = useState([]);\n  const [reports, setreports] = useState([]);\n  const [trigger, settrigger] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`\n  }; // const APIbody2 = {\n  //   \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n  //   \"X-CSRFToken\": \"frollo\",\n  //   ARG_ORGNAME: `${organization}`,\n  //   SERIAL_NUM: `${SNtopUsers}`,\n  //   NET_ID: `${networkID}`,\n  // };\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"my-token\");\n\n    if (data) {\n      setapiKey(JSON.parse(data));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  });\n  useEffect(() => {\n    fetch(\"/organizations\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/organizations\").then(res => res.json()).then(organizations => {\n      setorganizationList(organizations.organizations);\n    });\n  }, [apiKey]);\n  useEffect(() => {\n    fetch(\"/networks\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/networks\").then(res => res.json()).then(network => {\n      const NET = Object.values(network.networks);\n      let networkIDList = [];\n      NET.map(item => {\n        var IDListModel = [{\n          id: item.id\n        }];\n        networkIDList.push(...IDListModel);\n        setallNetworksIDList(networkIDList);\n      });\n      setnetworkList(network.networks);\n      settimeZone(network.networks[0].timeZone);\n    });\n  }, [apiKey, organization]);\n  useEffect(() => {\n    fetch(\"/devices\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/devices\").then(res => res.json()).then(device => {\n      setdeviceList(device.devices);\n      settotalDevices(device.devices.length);\n    });\n  }, [networkID]);\n  useEffect(() => {\n    let Dev1 = {};\n\n    for (var device = 0; device < deviceList.length; device++) {\n      Dev1[device] = deviceList[device];\n      let model = Dev1[device].model;\n\n      if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n        setSNtopUsers(Dev1[device].serial);\n      }\n    }\n  }, [deviceList, network]);\n  useEffect(() => {\n    fetch(\"/get_report/\").then(res => res.json()).then(reports => {\n      setreports(reports.reports);\n    });\n  }, [trigger]);\n  const dc = {\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    Name,\n    setName,\n    loginEmail,\n    setloginEmail,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    mapRows,\n    setmapRows,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    trigger,\n    settrigger,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers\n  };\n  return /*#__PURE__*/React.createElement(MainContext.Provider, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Template, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/App.js"],"names":["React","useState","useEffect","Template","MainContext","createContext","App","InitialKey","apiKey","setapiKey","organizationList","setorganizationList","networkList","setnetworkList","allNetworksIDList","setallNetworksIDList","organization","setorganization","organizationID","setorganizationID","networkID","setnetworkID","network","setnetwork","deviceList","setdeviceList","SNtopUsers","setSNtopUsers","clientList","setclientList","vlanList","setvlanList","allVlanList","setallVlanList","console","log","timeZone","settimeZone","Name","setName","loginEmail","setloginEmail","inputKey","setinputKey","inputConfKey","setinputConfKey","isLoggedIn","setisLoggedIn","switchLoginAPI","setswitchLoginAPI","switchDashboard","setswitchDashboard","switchLoggedIn","setswitchLoggedIn","switchLoggedout","setswitchLoggedout","switchToolsTemplate","setswitchToolsTemplate","switchMainTools","setswitchMainTools","switchswitchChangeApiKey","setswitchswitchChangeApiKey","classLogin","setclassLogin","classDashboard","setclassDashboard","classOrganization","setclassOrganization","classNetwork","setclassNetwork","classToolsTemplate","setclassToolsTemplate","logInlogOut","setlogInlogOut","ulClassorg","setulClassorg","ulClassnet","setulClassnet","totalDevices","settotalDevices","mapRows","setmapRows","reports","setreports","trigger","settrigger","loadingButton","setloadingButton","datab","setdatab","APIbody","organizationId","networkId","data","localStorage","getItem","JSON","parse","setItem","stringify","fetch","method","cache","headers","content_type","body","then","response","json","res","organizations","NET","Object","values","networks","networkIDList","map","item","IDListModel","id","push","device","devices","length","Dev1","model","startsWith","serial","dc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Template from \"./components/Template\";\n\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"12345\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  console.log(\"App -> allVlanList\", allVlanList);\n  const [timeZone, settimeZone] = useState(0);\n  const [Name, setName] = useState(\"\");\n  const [loginEmail, setloginEmail] = useState(\"\");\n  const [inputKey, setinputKey] = useState();\n  const [inputConfKey, setinputConfKey] = useState();\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(\n    false\n  );\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [mapRows, setmapRows] = useState([]);\n  const [reports, setreports] = useState([]);\n  const [trigger, settrigger] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`,\n  };\n\n  // const APIbody2 = {\n  //   \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n  //   \"X-CSRFToken\": \"frollo\",\n  //   ARG_ORGNAME: `${organization}`,\n  //   SERIAL_NUM: `${SNtopUsers}`,\n  //   NET_ID: `${networkID}`,\n  // };\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"my-token\");\n    if (data) {\n      setapiKey(JSON.parse(data));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  });\n\n  useEffect(() => {\n    fetch(\"/organizations\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(APIbody),\n    }).then((response) => {\n      return response.json;\n    });\n    fetch(\"/organizations\")\n      .then((res) => res.json())\n      .then((organizations) => {\n        setorganizationList(organizations.organizations);\n      });\n  }, [apiKey]);\n\n  useEffect(() => {\n    fetch(\"/networks\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(APIbody),\n    }).then((response) => {\n      return response.json;\n    });\n    fetch(\"/networks\")\n      .then((res) => res.json())\n      .then((network) => {\n        const NET = Object.values(network.networks);\n        let networkIDList = [];\n        NET.map((item) => {\n          var IDListModel = [\n            {\n              id: item.id,\n            },\n          ];\n          networkIDList.push(...IDListModel);\n          setallNetworksIDList(networkIDList);\n        });\n\n        setnetworkList(network.networks);\n        settimeZone(network.networks[0].timeZone);\n      });\n  }, [apiKey, organization]);\n\n  useEffect(() => {\n    fetch(\"/devices\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(APIbody),\n    }).then((response) => {\n      return response.json;\n    });\n    fetch(\"/devices\")\n      .then((res) => res.json())\n      .then((device) => {\n        setdeviceList(device.devices);\n        settotalDevices(device.devices.length);\n      });\n  }, [networkID]);\n\n  useEffect(() => {\n    let Dev1 = {};\n    for (var device = 0; device < deviceList.length; device++) {\n      Dev1[device] = deviceList[device];\n      let model = Dev1[device].model;\n      if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n        setSNtopUsers(Dev1[device].serial);\n      }\n    }\n  }, [deviceList, network]);\n\n  useEffect(() => {\n    fetch(\"/get_report/\")\n      .then((res) => res.json())\n      .then((reports) => {\n        setreports(reports.reports);\n      });\n  }, [trigger]);\n\n  const dc = {\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    Name,\n    setName,\n    loginEmail,\n    setloginEmail,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    mapRows,\n    setmapRows,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    trigger,\n    settrigger,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n  };\n\n  return (\n    <MainContext.Provider dc={dc}>\n      <Template dc={dc} />\n    </MainContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}