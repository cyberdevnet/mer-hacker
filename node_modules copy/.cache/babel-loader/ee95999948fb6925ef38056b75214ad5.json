{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\components\\\\Tools\\\\GetAllSubnets.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { MDBDataTableV5 } from \"mdbreact\";\nexport default function GetAllSubnets(ac) {\n  const [showtable, setshowtable] = useState(false);\n  const [trigger, settrigger] = useState(false);\n  const [loading, setloading] = useState(false);\n  console.log(\"GetAllDevicesIP -> loading\", loading);\n  const [alert, setalert] = useState(false);\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\n    organizationId: `${ac.dc.organizationID}`,\n    networkId: `${ac.dc.networkID}`\n  };\n  useEffect(() => {\n    async function APIcall() {\n      try {\n        if (trigger === false) {\n          return;\n        }\n\n        setloading(true);\n        fetch(\"/vlans\", {\n          method: [\"POST\"],\n          cache: \"no-cache\",\n          headers: {\n            content_type: \"application/json\"\n          },\n          body: JSON.stringify(APIbody)\n        }).then(response => {\n          return response.json;\n        });\n        fetch(\"/vlans\").then(res => res.json()).then(vlans => {\n          ac.dc.setvlanList(vlans.vlans);\n        });\n      } catch (err) {\n        if (err) {\n          setalert(true);\n        }\n      }\n\n      setloading(false);\n    }\n\n    APIcall();\n  }, [trigger]);\n\n  const handleSubnets = e => {\n    e.preventDefault();\n    let row = [];\n    ac.dc.vlanList.map(item => {\n      var rowModel = [{\n        Subnet: item.subnet,\n        VlanID: item.id,\n        VlanName: item.name,\n        MX_IP: item.applianceIp,\n        DNS: item.dnsNameservers\n      }];\n      row.push(...rowModel);\n      ac.dc.setmapRows(row);\n    });\n  };\n\n  const datatable = {\n    columns: [{\n      label: \"Subnet\",\n      field: \"Subnet\",\n      width: 150,\n      attributes: {\n        \"aria-controls\": \"DataTable\",\n        \"aria-label\": \"Description\"\n      }\n    }, {\n      label: \"VLAN ID\",\n      field: \"VlanID\",\n      sort: \"asc\",\n      width: 270\n    }, {\n      label: \"VLAN Name\",\n      field: \"VlanName\",\n      sort: \"asc\",\n      width: 200\n    }, {\n      label: \"MX IP\",\n      field: \"MX_IP\",\n      sort: \"asc\",\n      width: 100\n    }, {\n      label: \"DNS Servers\",\n      field: \"DNS\",\n      sort: \"asc\",\n      width: 100\n    }],\n    rows: ac.dc.mapRows\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-inner-main-templates\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 19\n    }\n  }, \"This scripts iterates through all networks in an organization and print all the subnets and VLANs associated with every organization. The script works only on MX and Z3 devices, does not work on VPN HUBs, the network must be reachable in the Meraki Dashboard.\")), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#null\",\n    className: \"btn btn-primary\",\n    onClick: handleSubnets,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"RUN\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, showtable ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MDBDataTableV5, {\n    hover: true,\n    entriesOptions: [10, 25, 50, 100],\n    entries: 10,\n    pagesAmount: 10,\n    data: datatable,\n    pagingTop: true,\n    searchTop: true,\n    searchBottom: false,\n    exportToCSV: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  })))));\n}","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/components/Tools/GetAllSubnets.js"],"names":["React","useEffect","useState","MDBDataTableV5","GetAllSubnets","ac","showtable","setshowtable","trigger","settrigger","loading","setloading","console","log","alert","setalert","APIbody","dc","apiKey","organizationId","organizationID","networkId","networkID","APIcall","fetch","method","cache","headers","content_type","body","JSON","stringify","then","response","json","res","vlans","setvlanList","err","handleSubnets","e","preventDefault","row","vlanList","map","item","rowModel","Subnet","subnet","VlanID","id","VlanName","name","MX_IP","applianceIp","DNS","dnsNameservers","push","setmapRows","datatable","columns","label","field","width","attributes","sort","rows","mapRows"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { MDBDataTableV5 } from \"mdbreact\";\r\n\r\nexport default function GetAllSubnets(ac) {\r\n  const [showtable, setshowtable] = useState(false);\r\n  const [trigger, settrigger] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n  console.log(\"GetAllDevicesIP -> loading\", loading);\r\n  const [alert, setalert] = useState(false);\r\n  const APIbody = {\r\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\r\n    organizationId: `${ac.dc.organizationID}`,\r\n    networkId: `${ac.dc.networkID}`,\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function APIcall() {\r\n      try {\r\n        if (trigger === false) {\r\n          return;\r\n        }\r\n        setloading(true);\r\n        fetch(\"/vlans\", {\r\n          method: [\"POST\"],\r\n          cache: \"no-cache\",\r\n          headers: {\r\n            content_type: \"application/json\",\r\n          },\r\n          body: JSON.stringify(APIbody),\r\n        }).then((response) => {\r\n          return response.json;\r\n        });\r\n        fetch(\"/vlans\")\r\n          .then((res) => res.json())\r\n          .then((vlans) => {\r\n            ac.dc.setvlanList(vlans.vlans);\r\n          });\r\n      } catch (err) {\r\n        if (err) {\r\n          setalert(true);\r\n        }\r\n      }\r\n      setloading(false);\r\n    }\r\n\r\n    APIcall();\r\n  }, [trigger]);\r\n\r\n  const handleSubnets = (e) => {\r\n    e.preventDefault();\r\n    let row = [];\r\n    ac.dc.vlanList.map((item) => {\r\n      var rowModel = [\r\n        {\r\n          Subnet: item.subnet,\r\n          VlanID: item.id,\r\n          VlanName: item.name,\r\n          MX_IP: item.applianceIp,\r\n          DNS: item.dnsNameservers,\r\n        },\r\n      ];\r\n      row.push(...rowModel);\r\n      ac.dc.setmapRows(row);\r\n    });\r\n  };\r\n\r\n  const datatable = {\r\n    columns: [\r\n      {\r\n        label: \"Subnet\",\r\n        field: \"Subnet\",\r\n        width: 150,\r\n        attributes: {\r\n          \"aria-controls\": \"DataTable\",\r\n          \"aria-label\": \"Description\",\r\n        },\r\n      },\r\n      {\r\n        label: \"VLAN ID\",\r\n        field: \"VlanID\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"VLAN Name\",\r\n        field: \"VlanName\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"MX IP\",\r\n        field: \"MX_IP\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"DNS Servers\",\r\n        field: \"DNS\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n    rows: ac.dc.mapRows,\r\n  };\r\n  return (\r\n    <div id=\"page-inner-main-templates\">\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12\">\r\n          <div className=\"panel panel-default\">\r\n            <div className=\"panel-body\">\r\n              <div className=\"panel panel-success\">\r\n                <div className=\"panel-heading\">Description</div>\r\n                <div className=\"panel-body\">\r\n                  <p>\r\n                    This scripts iterates through all networks in an\r\n                    organization and print all the subnets and VLANs associated\r\n                    with every organization. The script works only on MX and Z3\r\n                    devices, does not work on VPN HUBs, the network must be\r\n                    reachable in the Meraki Dashboard.\r\n                  </p>\r\n                </div>\r\n                <a\r\n                  href=\"#null\"\r\n                  className=\"btn btn-primary\"\r\n                  onClick={handleSubnets}\r\n                >\r\n                  RUN\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12\">\r\n          <div className=\"panel panel-default\">\r\n            {showtable ? (\r\n              <div className=\"panel-body\">\r\n                <MDBDataTableV5\r\n                  hover\r\n                  entriesOptions={[10, 25, 50, 100]}\r\n                  entries={10}\r\n                  pagesAmount={10}\r\n                  data={datatable}\r\n                  pagingTop\r\n                  searchTop\r\n                  searchBottom={false}\r\n                  exportToCSV={true}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div></div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}