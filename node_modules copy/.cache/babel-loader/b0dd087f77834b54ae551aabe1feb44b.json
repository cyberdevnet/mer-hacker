{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"12345\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [timeZone, settimeZone] = useState(0);\n  const [Name, setName] = useState(\"\");\n  const [loginEmail, setloginEmail] = useState(\"\");\n  const [inputKey, setinputKey] = useState();\n  const [inputConfKey, setinputConfKey] = useState();\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(false);\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [reports, setreports] = useState([]);\n  console.log(\"App -> reports\", reports);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  console.log(\"App -> isOrgSelected\", isOrgSelected);\n  const [isNetSelected, setisNetSelected] = useState(false);\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`\n  };\n  const APIbody2 = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    \"X-CSRFToken\": \"frollo\",\n    ARG_ORGNAME: `${organization}`,\n    SERIAL_NUM: `${SNtopUsers}`,\n    NET_ID: `${networkID}`,\n    NET_NAME: `${network}`\n  };\n  useEffect(() => {\n    const data = localStorage.getItem(\"my-token\");\n\n    if (data) {\n      setapiKey(JSON.parse(data));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  });\n  useEffect(() => {\n    fetch(\"/organizations\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/organizations\").then(res => res.json()).then(organizations => {\n      setorganizationList(organizations.organizations);\n    }).catch(error => {\n      console.log(error);\n    }); // eslint-disable-next-line\n  }, [apiKey]);\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n\n    fetch(\"/networks\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/networks\").then(res => res.json()).then(network => {\n      const NET = Object.values(network.networks);\n      let networkIDList = []; // eslint-disable-next-line\n\n      NET.map(item => {\n        var IDListModel = [{\n          id: item.id\n        }];\n        networkIDList.push(...IDListModel);\n        setallNetworksIDList(networkIDList);\n      });\n      setnetworkList(network.networks);\n      settimeZone(network.networks[0].timeZone);\n    }); // eslint-disable-next-line\n  }, [organization]);\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n\n    fetch(\"/devices\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/devices\").then(res => res.json()).then(device => {\n      setdeviceList(device.devices);\n      settotalDevices(device.devices.length);\n    }); // eslint-disable-next-line\n  }, [network]);\n  useEffect(() => {\n    let Dev1 = {};\n\n    for (var device = 0; device < deviceList.length; device++) {\n      Dev1[device] = deviceList[device];\n      let model = Dev1[device].model;\n\n      if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n        setSNtopUsers(Dev1[device].serial);\n      }\n    }\n  }, [deviceList, network]);\n  useEffect(() => {\n    async function APItopReport() {\n      if (isOrgSelected && isNetSelected === true) {\n        try {\n          console.log(\"'I'm running'\");\n          setloadingButton(true);\n          fetch(\"/topuserdata/\", {\n            method: [\"POST\"],\n            cache: \"no-cache\",\n            headers: {\n              content_type: \"application/json\"\n            },\n            body: JSON.stringify(APIbody2)\n          }).then(response => {\n            return response.json;\n          });\n          fetch(\"/get_report/\").then(res => {\n            console.log(\"APItopReport -> res\", res);\n            res.json();\n            console.log(\"i run\");\n          }).then(reports => {\n            console.log(\"APItopReport -> reports\", reports); // setreports(reports.reports);\n          });\n        } catch (err) {\n          if (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n\n    APItopReport();\n  }, [triggerTopReports]);\n  const dc = {\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    Name,\n    setName,\n    loginEmail,\n    setloginEmail,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected\n  };\n  return /*#__PURE__*/React.createElement(MainContext.Provider, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Template, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/App.js"],"names":["React","useState","useEffect","useRef","Template","MainContext","createContext","App","InitialKey","apiKey","setapiKey","organizationList","setorganizationList","networkList","setnetworkList","allNetworksIDList","setallNetworksIDList","organization","setorganization","organizationID","setorganizationID","networkID","setnetworkID","network","setnetwork","deviceList","setdeviceList","SNtopUsers","setSNtopUsers","clientList","setclientList","vlanList","setvlanList","allVlanList","setallVlanList","timeZone","settimeZone","Name","setName","loginEmail","setloginEmail","inputKey","setinputKey","inputConfKey","setinputConfKey","isLoggedIn","setisLoggedIn","switchLoginAPI","setswitchLoginAPI","switchDashboard","setswitchDashboard","switchLoggedIn","setswitchLoggedIn","switchLoggedout","setswitchLoggedout","switchToolsTemplate","setswitchToolsTemplate","switchMainTools","setswitchMainTools","switchswitchChangeApiKey","setswitchswitchChangeApiKey","classLogin","setclassLogin","classDashboard","setclassDashboard","classOrganization","setclassOrganization","classNetwork","setclassNetwork","classToolsTemplate","setclassToolsTemplate","logInlogOut","setlogInlogOut","ulClassorg","setulClassorg","ulClassnet","setulClassnet","totalDevices","settotalDevices","reports","setreports","console","log","triggerTopReports","settriggerTopReports","loadingButton","setloadingButton","datab","setdatab","isOrgSelected","setisOrgSelected","isNetSelected","setisNetSelected","APIbody","organizationId","networkId","APIbody2","ARG_ORGNAME","SERIAL_NUM","NET_ID","NET_NAME","data","localStorage","getItem","JSON","parse","setItem","stringify","fetch","method","cache","headers","content_type","body","then","response","json","res","organizations","catch","error","isFirstRunNetwork","current","NET","Object","values","networks","networkIDList","map","item","IDListModel","id","push","isFirstRunDevices","device","devices","length","Dev1","model","startsWith","serial","APItopReport","err","dc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\n\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"12345\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [timeZone, settimeZone] = useState(0);\n  const [Name, setName] = useState(\"\");\n  const [loginEmail, setloginEmail] = useState(\"\");\n  const [inputKey, setinputKey] = useState();\n  const [inputConfKey, setinputConfKey] = useState();\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(\n    false\n  );\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [reports, setreports] = useState([]);\n  console.log(\"App -> reports\", reports);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  console.log(\"App -> isOrgSelected\", isOrgSelected);\n  const [isNetSelected, setisNetSelected] = useState(false);\n\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`,\n  };\n\n  const APIbody2 = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    \"X-CSRFToken\": \"frollo\",\n    ARG_ORGNAME: `${organization}`,\n    SERIAL_NUM: `${SNtopUsers}`,\n    NET_ID: `${networkID}`,\n    NET_NAME: `${network}`,\n  };\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"my-token\");\n    if (data) {\n      setapiKey(JSON.parse(data));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  });\n\n  useEffect(() => {\n    fetch(\"/organizations\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(APIbody),\n    }).then((response) => {\n      return response.json;\n    });\n    fetch(\"/organizations\")\n      .then((res) => res.json())\n      .then((organizations) => {\n        setorganizationList(organizations.organizations);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    // eslint-disable-next-line\n  }, [apiKey]);\n\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n    fetch(\"/networks\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(APIbody),\n    }).then((response) => {\n      return response.json;\n    });\n    fetch(\"/networks\")\n      .then((res) => res.json())\n      .then((network) => {\n        const NET = Object.values(network.networks);\n        let networkIDList = [];\n        // eslint-disable-next-line\n        NET.map((item) => {\n          var IDListModel = [\n            {\n              id: item.id,\n            },\n          ];\n          networkIDList.push(...IDListModel);\n          setallNetworksIDList(networkIDList);\n        });\n\n        setnetworkList(network.networks);\n        settimeZone(network.networks[0].timeZone);\n      });\n    // eslint-disable-next-line\n  }, [organization]);\n\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n    fetch(\"/devices\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(APIbody),\n    }).then((response) => {\n      return response.json;\n    });\n    fetch(\"/devices\")\n      .then((res) => res.json())\n      .then((device) => {\n        setdeviceList(device.devices);\n        settotalDevices(device.devices.length);\n      });\n    // eslint-disable-next-line\n  }, [network]);\n\n  useEffect(() => {\n    let Dev1 = {};\n    for (var device = 0; device < deviceList.length; device++) {\n      Dev1[device] = deviceList[device];\n      let model = Dev1[device].model;\n      if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n        setSNtopUsers(Dev1[device].serial);\n      }\n    }\n  }, [deviceList, network]);\n\n  useEffect(() => {\n    async function APItopReport() {\n      if (isOrgSelected && isNetSelected === true) {\n        try {\n          console.log(\"'I'm running'\");\n\n          setloadingButton(true);\n\n          fetch(\"/topuserdata/\", {\n            method: [\"POST\"],\n            cache: \"no-cache\",\n            headers: {\n              content_type: \"application/json\",\n            },\n            body: JSON.stringify(APIbody2),\n          }).then((response) => {\n            return response.json;\n          });\n\n          fetch(\"/get_report/\")\n            .then((res) => {\n              console.log(\"APItopReport -> res\", res);\n              res.json();\n              console.log(\"i run\");\n            })\n            .then((reports) => {\n              console.log(\"APItopReport -> reports\", reports);\n              // setreports(reports.reports);\n            });\n        } catch (err) {\n          if (err) {\n            console.log(err);\n          }\n        }\n      }\n    }\n    APItopReport();\n  }, [triggerTopReports]);\n\n  const dc = {\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    Name,\n    setName,\n    loginEmail,\n    setloginEmail,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected,\n  };\n\n  return (\n    <MainContext.Provider dc={dc}>\n      <Template dc={dc} />\n    </MainContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}