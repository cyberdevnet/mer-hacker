{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\components\\\\Tools\\\\GetAllOrganizationSubnets.js\";\nimport React, { useEffect } from \"react\";\nimport { MDBDataTableV5 } from \"mdbreact\";\nexport default function GetAllOrganizationSubnets(ac) {\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\n    organizationId: `${ac.dc.organizationID}`,\n    networkId: `${ac.dc.networkID}`\n  };\n  const NET = Object.values(ac.dc.networkList);\n  console.log(\"GetAllOrganizationSubnets -> NET\", NET);\n\n  const test = e => {\n    e.preventDefault();\n    let networkIDList = [];\n    NET.map(item => {\n      var IDListModel = [{\n        id: item.id\n      }];\n      networkIDList.push(...IDListModel);\n      ac.dc.setallNetworksIDList(networkIDList); //   console.log(networkIDList);\n    });\n\n    for (var x = 0; x < networkIDList.length; x++) {\n      let row = [];\n      ac.dc.vlanList.map(item => {\n        var rowModel = [{\n          Subnet: item.subnet,\n          VlanID: item.id,\n          VlanName: item.name,\n          MX_IP: item.applianceIp,\n          DNS: item.dnsNameservers\n        }];\n        row.push(...rowModel); //   ac.dc.setmapRows(row);\n      });\n    }\n  };\n\n  const handleOrganizationSubnets = e => {\n    e.preventDefault();\n    let row = [];\n    ac.dc.vlanList.map(item => {\n      var rowModel = [{\n        Subnet: item.subnet,\n        VlanID: item.id,\n        VlanName: item.name,\n        MX_IP: item.applianceIp,\n        DNS: item.dnsNameservers\n      }];\n      row.push(...rowModel);\n      ac.dc.setmapRows(row);\n    });\n  };\n\n  useEffect(() => {\n    fetch(\"/vlans\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n\n    for (var x = 0; x < ac.dc.allNetworksIDList.length; x++) {\n      fetch(\"/vlans\").then(res => res.json()).then(vlans => {\n        //   ac.dc.setvlanList(vlans.vlans);\n        console.log(vlans.vlans);\n      });\n    }\n  }, [ac.dc.networkID]); //   const handleOrganizationSubnets = (e) => {\n  //     e.preventDefault();\n  //     let row = [];\n  //     ac.dc.vlanList.map((item) => {\n  //       var rowModel = [\n  //         {\n  //           Subnet: item.subnet,\n  //           VlanID: item.id,\n  //           VlanName: item.name,\n  //           MX_IP: item.applianceIp,\n  //           DNS: item.dnsNameservers,\n  //         },\n  //       ];\n  //       row.push(...rowModel);\n  //       ac.dc.setmapRows(row);\n  //     });\n  //   };\n\n  const datatable = {\n    columns: [{\n      label: \"Subnet\",\n      field: \"Subnet\",\n      width: 150,\n      attributes: {\n        \"aria-controls\": \"DataTable\",\n        \"aria-label\": \"Description\"\n      }\n    }, {\n      label: \"VLAN ID\",\n      field: \"VlanID\",\n      sort: \"asc\",\n      width: 270\n    }, {\n      label: \"VLAN Name\",\n      field: \"VlanName\",\n      sort: \"asc\",\n      width: 200\n    }, {\n      label: \"MX IP\",\n      field: \"MX_IP\",\n      sort: \"asc\",\n      width: 100\n    }, {\n      label: \"DNS Servers\",\n      field: \"DNS\",\n      sort: \"asc\",\n      width: 100\n    }],\n    rows: ac.dc.mapRows\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"page-inner-main-templates\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  }, \"This scripts iterates through all networks in an organization and print all the subnets and VLANs associated with every organization. The script works only on MX and Z3 devices, does not work on VPN HUBs, the network must be reachable in the Meraki Dashboard.\"))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel panel-default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: test,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }, \"Button\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#null\",\n    className: \"btn btn-primary\",\n    onClick: handleOrganizationSubnets,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, \"RUN\"), /*#__PURE__*/React.createElement(MDBDataTableV5, {\n    hover: true,\n    entriesOptions: [10, 25, 50, 100],\n    entries: 10,\n    pagesAmount: 10,\n    data: datatable,\n    pagingTop: true,\n    searchTop: true,\n    searchBottom: false,\n    exportToCSV: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/components/Tools/GetAllOrganizationSubnets.js"],"names":["React","useEffect","MDBDataTableV5","GetAllOrganizationSubnets","ac","APIbody","dc","apiKey","organizationId","organizationID","networkId","networkID","NET","Object","values","networkList","console","log","test","e","preventDefault","networkIDList","map","item","IDListModel","id","push","setallNetworksIDList","x","length","row","vlanList","rowModel","Subnet","subnet","VlanID","VlanName","name","MX_IP","applianceIp","DNS","dnsNameservers","handleOrganizationSubnets","setmapRows","fetch","method","cache","headers","content_type","body","JSON","stringify","then","response","json","allNetworksIDList","res","vlans","datatable","columns","label","field","width","attributes","sort","rows","mapRows"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { MDBDataTableV5 } from \"mdbreact\";\r\n\r\nexport default function GetAllOrganizationSubnets(ac) {\r\n  const APIbody = {\r\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\r\n    organizationId: `${ac.dc.organizationID}`,\r\n    networkId: `${ac.dc.networkID}`,\r\n  };\r\n\r\n  const NET = Object.values(ac.dc.networkList);\r\n  console.log(\"GetAllOrganizationSubnets -> NET\", NET);\r\n\r\n  const test = (e) => {\r\n    e.preventDefault();\r\n    let networkIDList = [];\r\n    NET.map((item) => {\r\n      var IDListModel = [\r\n        {\r\n          id: item.id,\r\n        },\r\n      ];\r\n      networkIDList.push(...IDListModel);\r\n      ac.dc.setallNetworksIDList(networkIDList);\r\n      //   console.log(networkIDList);\r\n    });\r\n\r\n    for (var x = 0; x < networkIDList.length; x++) {\r\n      let row = [];\r\n      ac.dc.vlanList.map((item) => {\r\n        var rowModel = [\r\n          {\r\n            Subnet: item.subnet,\r\n            VlanID: item.id,\r\n            VlanName: item.name,\r\n            MX_IP: item.applianceIp,\r\n            DNS: item.dnsNameservers,\r\n          },\r\n        ];\r\n        row.push(...rowModel);\r\n        //   ac.dc.setmapRows(row);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleOrganizationSubnets = (e) => {\r\n    e.preventDefault();\r\n    let row = [];\r\n    ac.dc.vlanList.map((item) => {\r\n      var rowModel = [\r\n        {\r\n          Subnet: item.subnet,\r\n          VlanID: item.id,\r\n          VlanName: item.name,\r\n          MX_IP: item.applianceIp,\r\n          DNS: item.dnsNameservers,\r\n        },\r\n      ];\r\n      row.push(...rowModel);\r\n      ac.dc.setmapRows(row);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"/vlans\", {\r\n      method: [\"POST\"],\r\n      cache: \"no-cache\",\r\n      headers: {\r\n        content_type: \"application/json\",\r\n      },\r\n      body: JSON.stringify(APIbody),\r\n    }).then((response) => {\r\n      return response.json;\r\n    });\r\n    for (var x = 0; x < ac.dc.allNetworksIDList.length; x++) {\r\n      fetch(\"/vlans\")\r\n        .then((res) => res.json())\r\n        .then((vlans) => {\r\n          //   ac.dc.setvlanList(vlans.vlans);\r\n          console.log(vlans.vlans);\r\n        });\r\n    }\r\n  }, [ac.dc.networkID]);\r\n\r\n  //   const handleOrganizationSubnets = (e) => {\r\n  //     e.preventDefault();\r\n  //     let row = [];\r\n  //     ac.dc.vlanList.map((item) => {\r\n  //       var rowModel = [\r\n  //         {\r\n  //           Subnet: item.subnet,\r\n  //           VlanID: item.id,\r\n  //           VlanName: item.name,\r\n  //           MX_IP: item.applianceIp,\r\n  //           DNS: item.dnsNameservers,\r\n  //         },\r\n  //       ];\r\n  //       row.push(...rowModel);\r\n  //       ac.dc.setmapRows(row);\r\n  //     });\r\n  //   };\r\n\r\n  const datatable = {\r\n    columns: [\r\n      {\r\n        label: \"Subnet\",\r\n        field: \"Subnet\",\r\n        width: 150,\r\n        attributes: {\r\n          \"aria-controls\": \"DataTable\",\r\n          \"aria-label\": \"Description\",\r\n        },\r\n      },\r\n      {\r\n        label: \"VLAN ID\",\r\n        field: \"VlanID\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"VLAN Name\",\r\n        field: \"VlanName\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"MX IP\",\r\n        field: \"MX_IP\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"DNS Servers\",\r\n        field: \"DNS\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n    rows: ac.dc.mapRows,\r\n  };\r\n  return (\r\n    <div id=\"page-inner-main-templates\">\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12\">\r\n          <div className=\"panel panel-default\">\r\n            <div className=\"panel-body\">\r\n              <div className=\"panel panel-success\">\r\n                <div className=\"panel-heading\">Description</div>\r\n                <div className=\"panel-body\">\r\n                  <p>\r\n                    This scripts iterates through all networks in an\r\n                    organization and print all the subnets and VLANs associated\r\n                    with every organization. The script works only on MX and Z3\r\n                    devices, does not work on VPN HUBs, the network must be\r\n                    reachable in the Meraki Dashboard.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12\">\r\n          <div className=\"panel panel-default\">\r\n            <div className=\"panel-body\">\r\n              <button onClick={test}>Button</button>\r\n              <a\r\n                href=\"#null\"\r\n                className=\"btn btn-primary\"\r\n                onClick={handleOrganizationSubnets}\r\n              >\r\n                RUN\r\n              </a>\r\n              <MDBDataTableV5\r\n                hover\r\n                entriesOptions={[10, 25, 50, 100]}\r\n                entries={10}\r\n                pagesAmount={10}\r\n                data={datatable}\r\n                pagingTop\r\n                searchTop\r\n                searchBottom={false}\r\n                exportToCSV={true}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}