{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [getOrgStatusCode, setgetOrgStatusCode] = useState(0);\n  console.log(\"App -> getOrgStatusCode\", getOrgStatusCode);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [alert, setalert] = useState(false);\n  const [timeZone, settimeZone] = useState(0);\n  const [inputKey, setinputKey] = useState();\n  const [inputConfKey, setinputConfKey] = useState();\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchAlertModal, setswitchAlertModal] = useState(false);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(false);\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [reports, setreports] = useState([]);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  const [isNetSelected, setisNetSelected] = useState(false);\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`\n  }; // STORE PERSISTANT VARIABLES ON RE-RENDER\n\n  useEffect(() => {\n    const apiKey = localStorage.getItem(\"my-token\");\n\n    if (apiKey) {\n      setapiKey(JSON.parse(apiKey));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  });\n  useEffect(() => {\n    async function callOrganization() {\n      fetch(\"/organizations\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/organizations\").then(res => {\n        res.json();\n        setgetOrgStatusCode(res.status);\n      }).then(organizations => {\n        setorganizationList(organizations.organizations);\n      }).catch(err => {\n        // setalert(true);\n        console.log(\"this is the err: \", err);\n      });\n    }\n\n    callOrganization(); // eslint-disable-next-line\n  }, [apiKey]);\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n\n    async function callNetworks() {\n      fetch(\"/networks\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/networks\").then(res => res.json()).then(network => {\n        const NET = Object.values(network.networks);\n        let networkIDList = []; // eslint-disable-next-line\n\n        NET.map(item => {\n          var IDListModel = [{\n            id: item.id\n          }];\n          networkIDList.push(...IDListModel);\n          setallNetworksIDList(networkIDList);\n        });\n        setnetworkList(network.networks);\n        settimeZone(network.networks[0].timeZone);\n      }).catch(err => {\n        setalert(true);\n        console.log(\"this is the err: \", err);\n      });\n      return () => {\n        setalert(false);\n      };\n    }\n\n    callNetworks(); // eslint-disable-next-line\n  }, [organization]);\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n\n    async function callDevices() {\n      fetch(\"/devices\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/devices\").then(res => res.json()).then(device => {\n        setdeviceList(device.devices);\n        settotalDevices(device.devices.length);\n      }).catch(err => {\n        setalert(true);\n        console.log(\"this is the error: \", err);\n      });\n      return () => {\n        setalert(false);\n      };\n    }\n\n    callDevices(); // eslint-disable-next-line\n  }, [network]);\n  useEffect(() => {\n    if (isOrgSelected && isNetSelected === true) {\n      let Dev1 = {};\n\n      for (var device = 0; device < deviceList.length; device++) {\n        Dev1[device] = deviceList[device];\n        let model = Dev1[device].model;\n\n        if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n          setSNtopUsers(Dev1[device].serial);\n        }\n      }\n    }\n  }, [deviceList, network]);\n  const dc = {\n    getOrgStatusCode,\n    setgetOrgStatusCode,\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    switchAlertModal,\n    setswitchAlertModal,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected,\n    alert,\n    setalert\n  };\n  return /*#__PURE__*/React.createElement(MainContext.Provider, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Template, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/App.js"],"names":["React","useState","useEffect","useRef","Template","MainContext","createContext","App","InitialKey","apiKey","setapiKey","getOrgStatusCode","setgetOrgStatusCode","console","log","organizationList","setorganizationList","networkList","setnetworkList","allNetworksIDList","setallNetworksIDList","organization","setorganization","organizationID","setorganizationID","networkID","setnetworkID","network","setnetwork","deviceList","setdeviceList","SNtopUsers","setSNtopUsers","clientList","setclientList","vlanList","setvlanList","allVlanList","setallVlanList","alert","setalert","timeZone","settimeZone","inputKey","setinputKey","inputConfKey","setinputConfKey","isLoggedIn","setisLoggedIn","switchLoginAPI","setswitchLoginAPI","switchDashboard","setswitchDashboard","switchLoggedIn","setswitchLoggedIn","switchLoggedout","setswitchLoggedout","switchToolsTemplate","setswitchToolsTemplate","switchMainTools","setswitchMainTools","switchAlertModal","setswitchAlertModal","switchswitchChangeApiKey","setswitchswitchChangeApiKey","classLogin","setclassLogin","classDashboard","setclassDashboard","classOrganization","setclassOrganization","classNetwork","setclassNetwork","classToolsTemplate","setclassToolsTemplate","logInlogOut","setlogInlogOut","ulClassorg","setulClassorg","ulClassnet","setulClassnet","totalDevices","settotalDevices","reports","setreports","triggerTopReports","settriggerTopReports","loadingButton","setloadingButton","datab","setdatab","isOrgSelected","setisOrgSelected","isNetSelected","setisNetSelected","APIbody","organizationId","networkId","localStorage","getItem","JSON","parse","setItem","stringify","callOrganization","fetch","method","cache","headers","content_type","body","then","response","json","res","status","organizations","catch","err","isFirstRunNetwork","current","callNetworks","NET","Object","values","networks","networkIDList","map","item","IDListModel","id","push","isFirstRunDevices","callDevices","device","devices","length","Dev1","model","startsWith","serial","dc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\n\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [getOrgStatusCode, setgetOrgStatusCode] = useState(0);\n  console.log(\"App -> getOrgStatusCode\", getOrgStatusCode);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [alert, setalert] = useState(false);\n  const [timeZone, settimeZone] = useState(0);\n  const [inputKey, setinputKey] = useState();\n  const [inputConfKey, setinputConfKey] = useState();\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchAlertModal, setswitchAlertModal] = useState(false);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(\n    false\n  );\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [reports, setreports] = useState([]);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  const [isNetSelected, setisNetSelected] = useState(false);\n\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`,\n  };\n\n  // STORE PERSISTANT VARIABLES ON RE-RENDER\n\n  useEffect(() => {\n    const apiKey = localStorage.getItem(\"my-token\");\n    if (apiKey) {\n      setapiKey(JSON.parse(apiKey));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  });\n\n  useEffect(() => {\n    async function callOrganization() {\n      fetch(\"/organizations\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/organizations\")\n        .then((res) => {\n          res.json();\n          setgetOrgStatusCode(res.status);\n        })\n\n        .then((organizations) => {\n          setorganizationList(organizations.organizations);\n        })\n        .catch((err) => {\n          // setalert(true);\n          console.log(\"this is the err: \", err);\n        });\n    }\n    callOrganization();\n\n    // eslint-disable-next-line\n  }, [apiKey]);\n\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n    async function callNetworks() {\n      fetch(\"/networks\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/networks\")\n        .then((res) => res.json())\n        .then((network) => {\n          const NET = Object.values(network.networks);\n          let networkIDList = [];\n          // eslint-disable-next-line\n          NET.map((item) => {\n            var IDListModel = [\n              {\n                id: item.id,\n              },\n            ];\n            networkIDList.push(...IDListModel);\n            setallNetworksIDList(networkIDList);\n          });\n\n          setnetworkList(network.networks);\n          settimeZone(network.networks[0].timeZone);\n        })\n        .catch((err) => {\n          setalert(true);\n          console.log(\"this is the err: \", err);\n        });\n      return () => {\n        setalert(false);\n      };\n    }\n    callNetworks();\n\n    // eslint-disable-next-line\n  }, [organization]);\n\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n    async function callDevices() {\n      fetch(\"/devices\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/devices\")\n        .then((res) => res.json())\n        .then((device) => {\n          setdeviceList(device.devices);\n          settotalDevices(device.devices.length);\n        })\n        .catch((err) => {\n          setalert(true);\n          console.log(\"this is the error: \", err);\n        });\n      return () => {\n        setalert(false);\n      };\n    }\n    callDevices();\n\n    // eslint-disable-next-line\n  }, [network]);\n\n  useEffect(() => {\n    if (isOrgSelected && isNetSelected === true) {\n      let Dev1 = {};\n      for (var device = 0; device < deviceList.length; device++) {\n        Dev1[device] = deviceList[device];\n        let model = Dev1[device].model;\n        if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n          setSNtopUsers(Dev1[device].serial);\n        }\n      }\n    }\n  }, [deviceList, network]);\n\n  const dc = {\n    getOrgStatusCode,\n    setgetOrgStatusCode,\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    switchAlertModal,\n    setswitchAlertModal,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected,\n    alert,\n    setalert,\n  };\n\n  return (\n    <MainContext.Provider dc={dc}>\n      <Template dc={dc} />\n    </MainContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}