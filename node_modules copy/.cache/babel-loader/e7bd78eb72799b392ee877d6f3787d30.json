{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\components\\\\Tools\\\\GetAllSubnets.js\";\nimport React, { useEffect } from \"react\";\nimport { MDBDataTableV5 } from \"mdbreact\";\nexport default function GetAllSubnets(ac) {\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\n    organizationId: `${ac.dc.organizationID}`,\n    networkId: `${ac.dc.networkID}`\n  };\n  console.log(ac.dc.vlanList);\n  useEffect(() => {\n    fetch(\"/vlans\", {\n      method: [\"POST\"],\n      cache: \"no-cache\",\n      headers: {\n        content_type: \"application/json\"\n      },\n      body: JSON.stringify(APIbody)\n    }).then(response => {\n      return response.json;\n    });\n    fetch(\"/vlans\").then(res => res.json()).then(vlans => {\n      ac.dc.setvlanList(vlans.vlans);\n    });\n  }, [ac.dc.networkID]);\n  const datatable = {\n    columns: [{\n      label: \"Description\",\n      field: \"Description\",\n      width: 150,\n      attributes: {\n        \"aria-controls\": \"DataTable\",\n        \"aria-label\": \"Description\"\n      }\n    }, {\n      label: \"Model\",\n      field: \"Model\",\n      sort: \"asc\",\n      width: 270\n    }, {\n      label: \"LAN IP address\",\n      field: \"LAN_IP_address\",\n      sort: \"asc\",\n      width: 200\n    }, {\n      label: \"MAC address\",\n      field: \"MAC_address\",\n      sort: \"asc\",\n      width: 100\n    }, {\n      label: \"WAN 1 IP\",\n      field: \"WAN_1_IP\",\n      sort: \"asc\",\n      width: 150\n    }, {\n      label: \"WAN 2 IP\",\n      field: \"WAN 2 IP\",\n      sort: \"asc\",\n      width: 100\n    }, {\n      label: \"Serial\",\n      field: \"Serial\",\n      sort: \"asc\",\n      width: 100\n    }],\n    rows: ac.dc.mapRows\n  };\n  return /*#__PURE__*/React.createElement(MDBDataTableV5, {\n    hover: true,\n    entriesOptions: [5, 25, 50, 100],\n    entries: 10,\n    pagesAmount: 10,\n    data: datatable,\n    pagingTop: true,\n    searchTop: true,\n    searchBottom: false,\n    exportToCSV: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/components/Tools/GetAllSubnets.js"],"names":["React","useEffect","MDBDataTableV5","GetAllSubnets","ac","APIbody","dc","apiKey","organizationId","organizationID","networkId","networkID","console","log","vlanList","fetch","method","cache","headers","content_type","body","JSON","stringify","then","response","json","res","vlans","setvlanList","datatable","columns","label","field","width","attributes","sort","rows","mapRows"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { MDBDataTableV5 } from \"mdbreact\";\r\n\r\nexport default function GetAllSubnets(ac) {\r\n  const APIbody = {\r\n    \"X-Cisco-Meraki-API-Key\": `${ac.dc.apiKey}`,\r\n    organizationId: `${ac.dc.organizationID}`,\r\n    networkId: `${ac.dc.networkID}`,\r\n  };\r\n\r\n  console.log(ac.dc.vlanList);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/vlans\", {\r\n      method: [\"POST\"],\r\n      cache: \"no-cache\",\r\n      headers: {\r\n        content_type: \"application/json\",\r\n      },\r\n      body: JSON.stringify(APIbody),\r\n    }).then((response) => {\r\n      return response.json;\r\n    });\r\n    fetch(\"/vlans\")\r\n      .then((res) => res.json())\r\n      .then((vlans) => {\r\n        ac.dc.setvlanList(vlans.vlans);\r\n      });\r\n  }, [ac.dc.networkID]);\r\n\r\n  const datatable = {\r\n    columns: [\r\n      {\r\n        label: \"Description\",\r\n        field: \"Description\",\r\n        width: 150,\r\n        attributes: {\r\n          \"aria-controls\": \"DataTable\",\r\n          \"aria-label\": \"Description\",\r\n        },\r\n      },\r\n      {\r\n        label: \"Model\",\r\n        field: \"Model\",\r\n        sort: \"asc\",\r\n        width: 270,\r\n      },\r\n      {\r\n        label: \"LAN IP address\",\r\n        field: \"LAN_IP_address\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"MAC address\",\r\n        field: \"MAC_address\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"WAN 1 IP\",\r\n        field: \"WAN_1_IP\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"WAN 2 IP\",\r\n        field: \"WAN 2 IP\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n      {\r\n        label: \"Serial\",\r\n        field: \"Serial\",\r\n        sort: \"asc\",\r\n        width: 100,\r\n      },\r\n    ],\r\n    rows: ac.dc.mapRows,\r\n  };\r\n  return (\r\n    <MDBDataTableV5\r\n      hover\r\n      entriesOptions={[5, 25, 50, 100]}\r\n      entries={10}\r\n      pagesAmount={10}\r\n      data={datatable}\r\n      pagingTop\r\n      searchTop\r\n      searchBottom={false}\r\n      exportToCSV={true}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}