{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frollo\\\\Desktop\\\\DevNet\\\\JavaScript\\\\React\\\\py_react\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"d5c1be108a9dc2c89ea4ba757abc2355b704e774\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [triggerGetOrg, settriggerGetOrg] = useState(0);\n  const [getOrgStatusCode, setgetOrgStatusCode] = useState(false);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [alert, setalert] = useState(false);\n  const [timeZone, settimeZone] = useState(0);\n  const [inputKey, setinputKey] = useState(\"\");\n  const [inputConfKey, setinputConfKey] = useState(\"\");\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchAlertModal, setswitchAlertModal] = useState(false);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(false);\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [reports, setreports] = useState([]);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  const [isNetSelected, setisNetSelected] = useState(false);\n  const [apiErroMsg, setapiErroMsg] = useState([]);\n  console.log(\"App -> apiErroMsg\", apiErroMsg);\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`\n  }; // STORE PERSISTANT VARIABLES ON RE-RENDER\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     const apiKey = localStorage.getItem(\"my-token\");\n  //     if (apiKey) {\n  //       setapiKey(JSON.parse(apiKey));\n  //     }\n  //   }\n  //   // eslint-disable-next-line\n  // }, []);\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  //   }\n  // });\n\n  const isFirstRunOrg = useRef(true);\n  useEffect(() => {\n    // if (isFirstRunOrg.current) {\n    //   isFirstRunOrg.current = false;\n    //   return;\n    // }\n    async function callOrganization() {\n      fetch(\"/organizations\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/organizations\").then(res => {\n        if (!res.ok) {\n          console.log(\"Unable to contact Meraki Cloud\");\n        }\n\n        setgetOrgStatusCode(res.status);\n        return res.json();\n      }) // .then((res) => res.json())\n      .then(organizations => {\n        setorganizationList(organizations.organizations);\n      }).catch(err => {\n        // setalert(true);\n        console.log(\"this is the err: \", err);\n      });\n    }\n\n    callOrganization(); // eslint-disable-next-line\n  }, []); // }, [triggerGetOrg]);\n\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n\n    async function callNetworks() {\n      fetch(\"/networks\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/networks\") // .then((res) => res.json())\n      .then(res => {\n        if (!res.ok) {\n          throw res;\n        }\n\n        return res.json();\n      }).then(network => {\n        const NET = Object.values(network.networks);\n        let networkIDList = []; // eslint-disable-next-line\n\n        NET.map(item => {\n          var IDListModel = [{\n            id: item.id\n          }];\n          networkIDList.push(...IDListModel);\n          setallNetworksIDList(networkIDList);\n        });\n        setnetworkList(network.networks);\n        settimeZone(network.networks[0].timeZone);\n      }).catch(err => {\n        err.json().then(errorMessage => {\n          setapiErroMsg( /*#__PURE__*/React.createElement(\"div\", {\n            className: \"form-input-error-msg alert alert-danger\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"glyphicon glyphicon-exclamation-sign\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }\n          }), errorMessage));\n        });\n        setalert(true);\n        console.log(\"this is the err: \", err);\n      });\n      return () => {\n        setalert(false);\n      };\n    }\n\n    callNetworks(); // eslint-disable-next-line\n  }, [organization]);\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n\n    async function callDevices() {\n      fetch(\"/devices\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\"\n        },\n        body: JSON.stringify(APIbody)\n      }).then(response => {\n        return response.json;\n      });\n      fetch(\"/devices\").then(res => res.json()).then(device => {\n        setdeviceList(device.devices);\n        settotalDevices(device.devices.length);\n      }).catch(err => {\n        setalert(true);\n        console.log(\"this is the error: \", err);\n      });\n      return () => {\n        setalert(false);\n      };\n    }\n\n    callDevices(); // eslint-disable-next-line\n  }, [network]);\n  useEffect(() => {\n    if (isOrgSelected && isNetSelected === true) {\n      let Dev1 = {};\n\n      for (var device = 0; device < deviceList.length; device++) {\n        Dev1[device] = deviceList[device];\n        let model = Dev1[device].model;\n\n        if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n          setSNtopUsers(Dev1[device].serial);\n        }\n      }\n    } // eslint-disable-next-line\n\n  }, [deviceList, network]);\n  const dc = {\n    triggerGetOrg,\n    settriggerGetOrg,\n    getOrgStatusCode,\n    setgetOrgStatusCode,\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    switchAlertModal,\n    setswitchAlertModal,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected,\n    alert,\n    setalert\n  };\n  return /*#__PURE__*/React.createElement(MainContext.Provider, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Template, {\n    dc: dc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/frollo/Desktop/DevNet/JavaScript/React/py_react/src/App.js"],"names":["React","useState","useEffect","useRef","Template","MainContext","createContext","App","InitialKey","apiKey","setapiKey","triggerGetOrg","settriggerGetOrg","getOrgStatusCode","setgetOrgStatusCode","organizationList","setorganizationList","networkList","setnetworkList","allNetworksIDList","setallNetworksIDList","organization","setorganization","organizationID","setorganizationID","networkID","setnetworkID","network","setnetwork","deviceList","setdeviceList","SNtopUsers","setSNtopUsers","clientList","setclientList","vlanList","setvlanList","allVlanList","setallVlanList","alert","setalert","timeZone","settimeZone","inputKey","setinputKey","inputConfKey","setinputConfKey","isLoggedIn","setisLoggedIn","switchLoginAPI","setswitchLoginAPI","switchDashboard","setswitchDashboard","switchLoggedIn","setswitchLoggedIn","switchLoggedout","setswitchLoggedout","switchToolsTemplate","setswitchToolsTemplate","switchMainTools","setswitchMainTools","switchAlertModal","setswitchAlertModal","switchswitchChangeApiKey","setswitchswitchChangeApiKey","classLogin","setclassLogin","classDashboard","setclassDashboard","classOrganization","setclassOrganization","classNetwork","setclassNetwork","classToolsTemplate","setclassToolsTemplate","logInlogOut","setlogInlogOut","ulClassorg","setulClassorg","ulClassnet","setulClassnet","totalDevices","settotalDevices","reports","setreports","triggerTopReports","settriggerTopReports","loadingButton","setloadingButton","datab","setdatab","isOrgSelected","setisOrgSelected","isNetSelected","setisNetSelected","apiErroMsg","setapiErroMsg","console","log","APIbody","organizationId","networkId","isFirstRunOrg","callOrganization","fetch","method","cache","headers","content_type","body","JSON","stringify","then","response","json","res","ok","status","organizations","catch","err","isFirstRunNetwork","current","callNetworks","NET","Object","values","networks","networkIDList","map","item","IDListModel","id","push","errorMessage","isFirstRunDevices","callDevices","device","devices","length","Dev1","model","startsWith","serial","dc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Template from \"./components/Template\";\n\nconst MainContext = React.createContext(null);\n\nfunction App() {\n  const InitialKey = \"d5c1be108a9dc2c89ea4ba757abc2355b704e774\";\n  const [apiKey, setapiKey] = useState(InitialKey);\n  const [triggerGetOrg, settriggerGetOrg] = useState(0);\n  const [getOrgStatusCode, setgetOrgStatusCode] = useState(false);\n  const [organizationList, setorganizationList] = useState([]);\n  const [networkList, setnetworkList] = useState([]);\n  const [allNetworksIDList, setallNetworksIDList] = useState([]);\n  const [organization, setorganization] = useState(\"Set Organization\");\n  const [organizationID, setorganizationID] = useState(0);\n  const [networkID, setnetworkID] = useState(0);\n  const [network, setnetwork] = useState(\"Networks\");\n  const [deviceList, setdeviceList] = useState([]);\n  const [SNtopUsers, setSNtopUsers] = useState(\"\");\n  const [clientList, setclientList] = useState([]);\n  const [vlanList, setvlanList] = useState([]);\n  const [allVlanList, setallVlanList] = useState([]);\n  const [alert, setalert] = useState(false);\n  const [timeZone, settimeZone] = useState(0);\n  const [inputKey, setinputKey] = useState(\"\");\n  const [inputConfKey, setinputConfKey] = useState(\"\");\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n  const [switchLoginAPI, setswitchLoginAPI] = useState(true);\n  const [switchDashboard, setswitchDashboard] = useState(false);\n  const [switchLoggedIn, setswitchLoggedIn] = useState(false);\n  const [switchLoggedout, setswitchLoggedout] = useState(false);\n  const [switchToolsTemplate, setswitchToolsTemplate] = useState(false);\n  const [switchMainTools, setswitchMainTools] = useState(false);\n  const [switchAlertModal, setswitchAlertModal] = useState(false);\n  const [switchswitchChangeApiKey, setswitchswitchChangeApiKey] = useState(\n    false\n  );\n  const [classLogin, setclassLogin] = useState(\"active-menu\");\n  const [classDashboard, setclassDashboard] = useState(\"\");\n  const [classOrganization, setclassOrganization] = useState(\"\");\n  const [classNetwork, setclassNetwork] = useState(\"\");\n  const [classToolsTemplate, setclassToolsTemplate] = useState(\"\");\n  const [logInlogOut, setlogInlogOut] = useState(\"Login\");\n  const [ulClassorg, setulClassorg] = useState(\"nav nav-second-level\");\n  const [ulClassnet, setulClassnet] = useState(\"nav nav-second-level\");\n  const [totalDevices, settotalDevices] = useState(0);\n  const [reports, setreports] = useState([]);\n  const [triggerTopReports, settriggerTopReports] = useState(1);\n  const [loadingButton, setloadingButton] = useState(false);\n  const [datab, setdatab] = useState([]);\n  const [isOrgSelected, setisOrgSelected] = useState(false);\n  const [isNetSelected, setisNetSelected] = useState(false);\n  const [apiErroMsg, setapiErroMsg] = useState([]);\n  console.log(\"App -> apiErroMsg\", apiErroMsg);\n\n  const APIbody = {\n    \"X-Cisco-Meraki-API-Key\": `${apiKey}`,\n    organizationId: `${organizationID}`,\n    networkId: `${networkID}`,\n  };\n\n  // STORE PERSISTANT VARIABLES ON RE-RENDER\n\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     const apiKey = localStorage.getItem(\"my-token\");\n  //     if (apiKey) {\n  //       setapiKey(JSON.parse(apiKey));\n  //     }\n  //   }\n  //   // eslint-disable-next-line\n  // }, []);\n\n  // useEffect(() => {\n  //   if (isLoggedIn) {\n  //     localStorage.setItem(\"my-token\", JSON.stringify(apiKey));\n  //   }\n  // });\n\n  const isFirstRunOrg = useRef(true);\n\n  useEffect(() => {\n    // if (isFirstRunOrg.current) {\n    //   isFirstRunOrg.current = false;\n    //   return;\n    // }\n    async function callOrganization() {\n      fetch(\"/organizations\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/organizations\")\n        .then((res) => {\n          if (!res.ok) {\n            console.log(\"Unable to contact Meraki Cloud\");\n          }\n          setgetOrgStatusCode(res.status);\n          return res.json();\n        })\n        // .then((res) => res.json())\n        .then((organizations) => {\n          setorganizationList(organizations.organizations);\n        })\n        .catch((err) => {\n          // setalert(true);\n          console.log(\"this is the err: \", err);\n        });\n    }\n    callOrganization();\n\n    // eslint-disable-next-line\n  }, []);\n  // }, [triggerGetOrg]);\n\n  const isFirstRunNetwork = useRef(true);\n  useEffect(() => {\n    if (isFirstRunNetwork.current) {\n      isFirstRunNetwork.current = false;\n      return;\n    }\n    async function callNetworks() {\n      fetch(\"/networks\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/networks\")\n        // .then((res) => res.json())\n        .then((res) => {\n          if (!res.ok) {\n            throw res;\n          }\n          return res.json();\n        })\n        .then((network) => {\n          const NET = Object.values(network.networks);\n          let networkIDList = [];\n          // eslint-disable-next-line\n          NET.map((item) => {\n            var IDListModel = [\n              {\n                id: item.id,\n              },\n            ];\n            networkIDList.push(...IDListModel);\n            setallNetworksIDList(networkIDList);\n          });\n\n          setnetworkList(network.networks);\n          settimeZone(network.networks[0].timeZone);\n        })\n        .catch((err) => {\n          err.json().then((errorMessage) => {\n            setapiErroMsg(\n              <div className=\"form-input-error-msg alert alert-danger\">\n                <span className=\"glyphicon glyphicon-exclamation-sign\"></span>\n                {errorMessage}\n              </div>\n            );\n          });\n          setalert(true);\n          console.log(\"this is the err: \", err);\n        });\n      return () => {\n        setalert(false);\n      };\n    }\n    callNetworks();\n\n    // eslint-disable-next-line\n  }, [organization]);\n\n  const isFirstRunDevices = useRef(true);\n  useEffect(() => {\n    if (isFirstRunDevices.current) {\n      isFirstRunDevices.current = false;\n      return;\n    }\n    async function callDevices() {\n      fetch(\"/devices\", {\n        method: [\"POST\"],\n        cache: \"no-cache\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(APIbody),\n      }).then((response) => {\n        return response.json;\n      });\n      fetch(\"/devices\")\n        .then((res) => res.json())\n        .then((device) => {\n          setdeviceList(device.devices);\n          settotalDevices(device.devices.length);\n        })\n        .catch((err) => {\n          setalert(true);\n          console.log(\"this is the error: \", err);\n        });\n      return () => {\n        setalert(false);\n      };\n    }\n    callDevices();\n\n    // eslint-disable-next-line\n  }, [network]);\n\n  useEffect(() => {\n    if (isOrgSelected && isNetSelected === true) {\n      let Dev1 = {};\n      for (var device = 0; device < deviceList.length; device++) {\n        Dev1[device] = deviceList[device];\n        let model = Dev1[device].model;\n        if (model.startsWith(\"MX\") || model.startsWith(\"Z\")) {\n          setSNtopUsers(Dev1[device].serial);\n        }\n      }\n    }\n    // eslint-disable-next-line\n  }, [deviceList, network]);\n\n  const dc = {\n    triggerGetOrg,\n    settriggerGetOrg,\n    getOrgStatusCode,\n    setgetOrgStatusCode,\n    organizationList,\n    setorganizationList,\n    networkList,\n    setnetworkList,\n    networkID,\n    setnetworkID,\n    organization,\n    setorganization,\n    organizationID,\n    setorganizationID,\n    timeZone,\n    settimeZone,\n    network,\n    setnetwork,\n    apiKey,\n    setapiKey,\n    inputKey,\n    setinputKey,\n    inputConfKey,\n    setinputConfKey,\n    isLoggedIn,\n    setisLoggedIn,\n    switchLoginAPI,\n    setswitchLoginAPI,\n    switchDashboard,\n    setswitchDashboard,\n    switchLoggedIn,\n    setswitchLoggedIn,\n    switchLoggedout,\n    setswitchLoggedout,\n    switchToolsTemplate,\n    setswitchToolsTemplate,\n    classLogin,\n    setclassLogin,\n    classDashboard,\n    setclassDashboard,\n    switchswitchChangeApiKey,\n    setswitchswitchChangeApiKey,\n    switchMainTools,\n    setswitchMainTools,\n    switchAlertModal,\n    setswitchAlertModal,\n    logInlogOut,\n    setlogInlogOut,\n    ulClassorg,\n    setulClassorg,\n    ulClassnet,\n    setulClassnet,\n    classOrganization,\n    setclassOrganization,\n    classNetwork,\n    setclassNetwork,\n    totalDevices,\n    settotalDevices,\n    deviceList,\n    setdeviceList,\n    classToolsTemplate,\n    setclassToolsTemplate,\n    clientList,\n    setclientList,\n    vlanList,\n    setvlanList,\n    allNetworksIDList,\n    setallNetworksIDList,\n    allVlanList,\n    setallVlanList,\n    reports,\n    setreports,\n    datab,\n    setdatab,\n    triggerTopReports,\n    settriggerTopReports,\n    loadingButton,\n    setloadingButton,\n    SNtopUsers,\n    setSNtopUsers,\n    isOrgSelected,\n    setisOrgSelected,\n    isNetSelected,\n    setisNetSelected,\n    alert,\n    setalert,\n  };\n\n  return (\n    <MainContext.Provider dc={dc}>\n      <Template dc={dc} />\n    </MainContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}